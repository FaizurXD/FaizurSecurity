{
  "version": 3,
  "sources": ["../../commands/whitelist.ts"],
  "sourcesContent": ["import type { ChatInputCommandInteraction, GuildMember } from 'discord.js';\nimport { SlashCommandBuilder, PermissionFlagsBits, EmbedBuilder, Colors } from 'discord.js';\nimport { defaultError, errorEmbedBuilder, successEmbedBuilder } from '../utils.js';\nimport prisma from '../database.js';\n\nexport default class Whitelist {\n\tdata = new SlashCommandBuilder()\n\t\t.setName('whitelist')\n\t\t.setDescription('Turn this on incase of a big raid!')\n\t\t.setDefaultMemberPermissions(PermissionFlagsBits.Administrator)\n\t\t.addSubcommand(subcommand =>\n\t\t\tsubcommand\n\t\t\t\t.setName('member')\n\t\t\t\t.setDescription('The default member role!')\n\t\t\t\t.addRoleOption(option => option.setName('role').setDescription('The default member role that will be set').setRequired(true))\n\t\t)\n\t\t.addSubcommand(subcommand =>\n\t\t\tsubcommand\n\t\t\t\t.setName('mod')\n\t\t\t\t.setDescription('The default mod role!')\n\t\t\t\t.addRoleOption(option => option.setName('role').setDescription('The default moderator role that will be set').setRequired(true))\n\t\t)\n\t\t.addSubcommand(subcommand =>\n\t\t\tsubcommand\n\t\t\t\t.setName('admin')\n\t\t\t\t.setDescription('Give a user admin perms (dangerous)')\n\t\t\t\t.addUserOption(option => option.setName('user').setDescription('The user that will be made an admin').setRequired(true))\n\t\t)\n\t\t.addSubcommand(subcommand =>\n\t\t\tsubcommand\n\t\t\t\t.setName('owner')\n\t\t\t\t.setDescription('Add another owner to your server (very dangerous)')\n\t\t\t\t.addUserOption(option => option.setName('user').setDescription('The user that will be made an admin').setRequired(true))\n\t\t)\n\t\t.addSubcommand(subcommand => subcommand.setName('show').setDescription('The all whitelisted roles'))\n\t\t.addSubcommand(subcommand =>\n\t\t\tsubcommand\n\t\t\t\t.setName('remove')\n\t\t\t\t.setDescription('Set a whitelist option to defaults or remove an admin/owner')\n\t\t\t\t.addStringOption(option =>\n\t\t\t\t\toption\n\t\t\t\t\t\t.setName('setting')\n\t\t\t\t\t\t.setDescription('What setting you wanna change')\n\t\t\t\t\t\t.addChoices(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'member',\n\t\t\t\t\t\t\t\tvalue: 'member',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'mod',\n\t\t\t\t\t\t\t\tvalue: 'mod',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'admin',\n\t\t\t\t\t\t\t\tvalue: 'admin',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'owner',\n\t\t\t\t\t\t\t\tvalue: 'owner',\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.setRequired(true)\n\t\t\t\t)\n\t\t\t\t.addUserOption(option => option.setName('user').setDescription('What members you want to remove from admin/owner whitelist?'))\n\t\t);\n\n\tasync run(interaction: ChatInputCommandInteraction) {\n\t\tif (!interaction.inGuild()) {\n\t\t\tawait interaction.reply({ embeds: [errorEmbedBuilder('This command can only be run on a server!')] });\n\t\t\treturn;\n\t\t}\n\n\t\tconst tempGuild = await prisma.guild.findUnique({\n\t\t\twhere: { guild: interaction.guildId! },\n\t\t\tselect: { owners: true },\n\t\t});\n\n\t\tif (!(tempGuild?.owners.includes(interaction.user.id) || interaction.guild?.ownerId === interaction.user.id)) {\n\t\t\tawait interaction.reply({ embeds: [errorEmbedBuilder('Only an owner can use the whitelist.')], ephemeral: true });\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tconst role = interaction.options.getRole('role');\n\t\t\tawait interaction.deferReply({ ephemeral: true });\n\n\t\t\tswitch (interaction.options.getSubcommand()) {\n\t\t\t\tcase 'member':\n\t\t\t\t\tawait prisma.guild.upsert({\n\t\t\t\t\t\twhere: { guild: interaction.guildId! },\n\t\t\t\t\t\tselect: { verificationChannel: true },\n\t\t\t\t\t\tupdate: { members: role?.id },\n\t\t\t\t\t\tcreate: {\n\t\t\t\t\t\t\tguild: interaction.guildId!,\n\t\t\t\t\t\t\tmembers: role?.id,\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\n\t\t\t\t\tawait interaction.editReply({ embeds: [successEmbedBuilder(`Successfully set the **Member** role as ${role}`)] });\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'mod':\n\t\t\t\t\tawait prisma.guild.upsert({\n\t\t\t\t\t\twhere: { guild: interaction.guildId! },\n\t\t\t\t\t\tupdate: { mods: role?.id },\n\t\t\t\t\t\tcreate: {\n\t\t\t\t\t\t\tguild: interaction.guildId!,\n\t\t\t\t\t\t\tmods: role?.id,\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\n\t\t\t\t\tawait interaction.editReply({ embeds: [successEmbedBuilder(`Successfully set the **Moderator** role as ${role}`)] });\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'admin':\n\t\t\t\t\tconst member = interaction.options.getMember('user') as GuildMember;\n\n\t\t\t\t\tconst tempGuild = await prisma.guild.findUnique({\n\t\t\t\t\t\twhere: { guild: interaction.guildId! },\n\t\t\t\t\t\tselect: { admins: true },\n\t\t\t\t\t});\n\n\t\t\t\t\tif (!member) {\n\t\t\t\t\t\tawait interaction.editReply({ embeds: [errorEmbedBuilder('That user in not on this server!')] });\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (tempGuild?.admins?.includes(member.user.id)) {\n\t\t\t\t\t\tawait interaction.editReply({ embeds: [errorEmbedBuilder('Member is already an admin!')] });\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tawait prisma.guild.upsert({\n\t\t\t\t\t\twhere: { guild: interaction.guildId! },\n\t\t\t\t\t\tupdate: { admins: { push: member.id } },\n\t\t\t\t\t\tcreate: {\n\t\t\t\t\t\t\tguild: interaction.guildId!,\n\t\t\t\t\t\t\tadmins: [member.id],\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\n\t\t\t\t\tawait interaction.editReply({ embeds: [successEmbedBuilder(`Successfully added ${member.user} as an **admin**!`)] });\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'owner':\n\t\t\t\t\tconst owner = interaction.options.getMember('user') as GuildMember;\n\n\t\t\t\t\tconst tempGuild2 = await prisma.guild.findUnique({\n\t\t\t\t\t\twhere: { guild: interaction.guildId! },\n\t\t\t\t\t\tselect: { owners: true },\n\t\t\t\t\t});\n\n\t\t\t\t\tif (!owner) {\n\t\t\t\t\t\tawait interaction.editReply({ embeds: [errorEmbedBuilder('That user in not on this server!')] });\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (tempGuild2?.owners?.includes(owner.user.id)) {\n\t\t\t\t\t\tawait interaction.editReply({ embeds: [errorEmbedBuilder('Member is already an owner!')] });\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tawait prisma.guild.upsert({\n\t\t\t\t\t\twhere: { guild: interaction.guildId! },\n\t\t\t\t\t\tupdate: { owners: { push: owner.id } },\n\t\t\t\t\t\tcreate: {\n\t\t\t\t\t\t\tguild: interaction.guildId!,\n\t\t\t\t\t\t\towners: [owner.id],\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\n\t\t\t\t\tawait interaction.editReply({ embeds: [successEmbedBuilder(`Successfully added ${owner.user} as an **owner**!`)] });\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'show':\n\t\t\t\t\tconst NOT_SET = '<:error:1009134465995509810> Not Set';\n\n\t\t\t\t\tconst guild = await prisma.guild.findUnique({\n\t\t\t\t\t\twhere: {\n\t\t\t\t\t\t\tguild: interaction.guildId,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tselect: {\n\t\t\t\t\t\t\tmembers: true,\n\t\t\t\t\t\t\tmods: true,\n\t\t\t\t\t\t\tadmins: true,\n\t\t\t\t\t\t\towners: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\n\t\t\t\t\tconst showEmbed = new EmbedBuilder({\n\t\t\t\t\t\ttitle: `<:staff:1008719693827285002> Whitelisted Roles`,\n\t\t\t\t\t\tdescription: '> All the current whitelisted roles.',\n\t\t\t\t\t\tfields: [\n\t\t\t\t\t\t\t{ name: 'Members', value: `${guild?.members ? `<@&${guild?.members}>` : NOT_SET}` },\n\t\t\t\t\t\t\t{ name: 'Mods', value: `${guild?.mods ? `<@&${guild?.mods}>` : NOT_SET}` },\n\t\t\t\t\t\t\t{ name: 'Admins', value: `${guild?.admins?.length ? guild.admins.reduce((acc, val) => acc.concat(`<@${val}>\\n`), '') : NOT_SET}` },\n\t\t\t\t\t\t\t{ name: 'Owners', value: `${guild?.owners?.length ? guild.owners.reduce((acc, val) => acc.concat(`<@${val}>\\n`), '') : NOT_SET}` },\n\t\t\t\t\t\t],\n\t\t\t\t\t\tcolor: Colors.Blurple,\n\t\t\t\t\t});\n\n\t\t\t\t\tawait interaction.editReply({ embeds: [showEmbed] });\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'remove':\n\t\t\t\t\tconst setting = interaction.options.getString('setting');\n\t\t\t\t\tswitch (setting) {\n\t\t\t\t\t\tcase 'member':\n\t\t\t\t\t\t\tawait prisma.guild.upsert({\n\t\t\t\t\t\t\t\twhere: { guild: interaction.guildId! },\n\t\t\t\t\t\t\t\tupdate: { members: null },\n\t\t\t\t\t\t\t\tcreate: { guild: interaction.guildId!, members: null },\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tawait interaction.editReply({ embeds: [successEmbedBuilder(`Successfully resetted member role to default!`)] });\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'mod':\n\t\t\t\t\t\t\tawait prisma.guild.upsert({\n\t\t\t\t\t\t\t\twhere: { guild: interaction.guildId! },\n\t\t\t\t\t\t\t\tupdate: { mods: null },\n\t\t\t\t\t\t\t\tcreate: { guild: interaction.guildId!, mods: null },\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tawait interaction.editReply({ embeds: [successEmbedBuilder(`Successfully resetted mod role to default!`)] });\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'admin':\n\t\t\t\t\t\t\tconst member = interaction.options.getMember('user') as GuildMember;\n\n\t\t\t\t\t\t\tconst tempGuild = await prisma.guild.findUnique({\n\t\t\t\t\t\t\t\twhere: { guild: interaction.guildId! },\n\t\t\t\t\t\t\t\tselect: { admins: true },\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tif (!tempGuild?.admins?.length) {\n\t\t\t\t\t\t\t\tawait interaction.editReply({ embeds: [errorEmbedBuilder('No admins in this server')] });\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (!member) {\n\t\t\t\t\t\t\t\tawait interaction.editReply({ embeds: [errorEmbedBuilder('That user in not on this server!')] });\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst newAdmins = tempGuild?.admins?.filter(admin => admin !== member?.user?.id);\n\n\t\t\t\t\t\t\tif (JSON.stringify(tempGuild?.admins) === JSON.stringify(newAdmins)) {\n\t\t\t\t\t\t\t\tawait interaction.editReply({ embeds: [errorEmbedBuilder('That user is not an admin!')] });\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tawait prisma.guild.upsert({\n\t\t\t\t\t\t\t\twhere: { guild: interaction.guildId! },\n\t\t\t\t\t\t\t\tupdate: { admins: newAdmins },\n\t\t\t\t\t\t\t\tcreate: { guild: interaction.guildId! },\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tawait interaction.editReply({ embeds: [successEmbedBuilder(`Successfully removed ${member.user} as an admin!`)] });\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'owner':\n\t\t\t\t\t\t\tconst owner = interaction.options.getMember('user') as GuildMember;\n\n\t\t\t\t\t\t\tconst tempGuild2 = await prisma.guild.findUnique({\n\t\t\t\t\t\t\t\twhere: { guild: interaction.guildId! },\n\t\t\t\t\t\t\t\tselect: { owners: true },\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tif (!tempGuild2?.owners?.length) {\n\t\t\t\t\t\t\t\tawait interaction.editReply({ embeds: [errorEmbedBuilder('No admins in this server')] });\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (!owner) {\n\t\t\t\t\t\t\t\tawait interaction.editReply({ embeds: [errorEmbedBuilder('That user in not on this server!')] });\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst newOwners = tempGuild2?.owners?.filter(o => o !== owner?.user?.id);\n\n\t\t\t\t\t\t\tif (JSON.stringify(tempGuild2?.owners) === JSON.stringify(newOwners)) {\n\t\t\t\t\t\t\t\tawait interaction.editReply({ embeds: [errorEmbedBuilder('That user is not an admin!')] });\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tawait prisma.guild.upsert({\n\t\t\t\t\t\t\t\twhere: { guild: interaction.guildId! },\n\t\t\t\t\t\t\t\tupdate: { owners: newOwners },\n\t\t\t\t\t\t\t\tcreate: { guild: interaction.guildId! },\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tawait interaction.editReply({ embeds: [successEmbedBuilder(`Successfully removed ${owner?.user} as an owner!`)] });\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t}\n\t\t} catch {\n\t\t\tawait interaction.editReply(defaultError);\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": ["tempGuild", "tempGuild2", "member", "_a", "owner"]
}
