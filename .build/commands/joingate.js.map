{
  "version": 3,
  "sources": ["../../commands/joingate.ts"],
  "sourcesContent": ["import type { ChatInputCommandInteraction, GuildMember, TextChannel } from 'discord.js';\nimport { SlashCommandBuilder, PermissionFlagsBits } from 'discord.js';\nimport { defaultError, errorEmbedBuilder, logBuilder, successEmbedBuilder } from '../utils.js';\nimport prisma from '../database.js';\n\nexport default class RaidMode {\n\tdata = new SlashCommandBuilder()\n\t\t.setName('joingate')\n\t\t.setDefaultMemberPermissions(PermissionFlagsBits.Administrator)\n\t\t.setDescription('Dont allow members to join your server')\n\t\t.addSubcommand(subcommand => subcommand.setName('on').setDescription('turn the join gate on!'))\n\t\t.addSubcommand(subcommand => subcommand.setName('off').setDescription('turn the join gate off!'));\n\n\tasync run(interaction: ChatInputCommandInteraction) {\n\t\tif (!interaction.inGuild()) {\n\t\t\tawait interaction.reply({ embeds: [errorEmbedBuilder('This command can only be run on a server!')] });\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tawait interaction.deferReply({ ephemeral: true });\n\t\t\tconst adminsGuild = await prisma.guild.findUnique({\n\t\t\t\twhere: { guild: interaction.guildId },\n\t\t\t\tselect: { admins: true },\n\t\t\t});\n\t\t\tif (!(adminsGuild?.admins?.includes(interaction.user.id) || interaction.user.id === interaction.guild?.ownerId)) {\n\t\t\t\tawait interaction.editReply({ embeds: [errorEmbedBuilder(\"You don't have permission to toggle the join gate\")] });\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tswitch (interaction.options.getSubcommand()) {\n\t\t\t\tcase 'on':\n\t\t\t\t\tconst onGuild = await prisma.guild.upsert({\n\t\t\t\t\t\twhere: { guild: interaction.guildId },\n\t\t\t\t\t\tupdate: { raidMode: true },\n\t\t\t\t\t\tcreate: {\n\t\t\t\t\t\t\tguild: interaction.guildId,\n\t\t\t\t\t\t\traidMode: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\n\t\t\t\t\tconst onLogs = interaction.guild?.channels.cache.get(onGuild?.logs!) as TextChannel;\n\t\t\t\t\tawait onLogs?.send(\n\t\t\t\t\t\tlogBuilder({\n\t\t\t\t\t\t\tmember: interaction.member as GuildMember,\n\t\t\t\t\t\t\tcontent: `Join gate has been activated by ${interaction.user}!`,\n\t\t\t\t\t\t\treason: `Join gate feature has been activated by ${interaction.user.tag}`,\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\t\t\t\t\tawait interaction.editReply({ embeds: [successEmbedBuilder('The Join Gate is now currently active.')] });\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'off':\n\t\t\t\t\tconst guild = await prisma.guild.findUnique({\n\t\t\t\t\t\twhere: { guild: interaction.guildId },\n\t\t\t\t\t\tselect: { raidMode: true, logs: true },\n\t\t\t\t\t});\n\n\t\t\t\t\tif (!guild?.raidMode) {\n\t\t\t\t\t\tawait interaction.editReply({ embeds: [errorEmbedBuilder('The Join Gate has not been activated in this server!')] });\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tawait prisma.guild.update({\n\t\t\t\t\t\twhere: { guild: interaction.guildId },\n\t\t\t\t\t\tdata: { raidMode: false },\n\t\t\t\t\t});\n\n\t\t\t\t\tawait interaction.editReply({ embeds: [successEmbedBuilder('The Join Gate is now currently off')] });\n\n\t\t\t\t\tconst offLogs = interaction.guild?.channels.cache.get(guild?.logs!) as TextChannel;\n\t\t\t\t\tawait offLogs?.send(\n\t\t\t\t\t\tlogBuilder({\n\t\t\t\t\t\t\tmember: interaction.member as GuildMember,\n\t\t\t\t\t\t\tcontent: `Join gate has been deactivated by ${interaction.user}!`,\n\t\t\t\t\t\t\treason: `Join gate feature has been deactivated by ${interaction.user.tag}`,\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t} catch {\n\t\t\tawait interaction.editReply(defaultError);\n\t\t}\n\t}\n}\n"],
  "mappings": "AACA,SAAS,qBAAqB,2BAA2B;AACzD,SAAS,cAAc,mBAAmB,YAAY,2BAA2B;AACjF,OAAO,YAAY;AAEnB,qBAAqB,SAAS;AAAA,EAA9B;AACC,gBAAO,IAAI,oBAAoB,EAC7B,QAAQ,UAAU,EAClB,4BAA4B,oBAAoB,aAAa,EAC7D,eAAe,wCAAwC,EACvD,cAAc,gBAAc,WAAW,QAAQ,IAAI,EAAE,eAAe,wBAAwB,CAAC,EAC7F,cAAc,gBAAc,WAAW,QAAQ,KAAK,EAAE,eAAe,yBAAyB,CAAC;AAAA;AAAA,EAEjG,MAAM,IAAI,aAA0C;AAbrD;AAcE,QAAI,CAAC,YAAY,QAAQ,GAAG;AAC3B,YAAM,YAAY,MAAM,EAAE,QAAQ,CAAC,kBAAkB,2CAA2C,CAAC,EAAE,CAAC;AACpG;AAAA,IACD;AAEA,QAAI;AACH,YAAM,YAAY,WAAW,EAAE,WAAW,KAAK,CAAC;AAChD,YAAM,cAAc,MAAM,OAAO,MAAM,WAAW;AAAA,QACjD,OAAO,EAAE,OAAO,YAAY,QAAQ;AAAA,QACpC,QAAQ,EAAE,QAAQ,KAAK;AAAA,MACxB,CAAC;AACD,UAAI,IAAE,gDAAa,WAAb,mBAAqB,SAAS,YAAY,KAAK,QAAO,YAAY,KAAK,SAAO,iBAAY,UAAZ,mBAAmB,WAAU;AAChH,cAAM,YAAY,UAAU,EAAE,QAAQ,CAAC,kBAAkB,mDAAmD,CAAC,EAAE,CAAC;AAChH;AAAA,MACD;AACA,cAAQ,YAAY,QAAQ,cAAc,GAAG;AAAA,QAC5C,KAAK;AACJ,gBAAM,UAAU,MAAM,OAAO,MAAM,OAAO;AAAA,YACzC,OAAO,EAAE,OAAO,YAAY,QAAQ;AAAA,YACpC,QAAQ,EAAE,UAAU,KAAK;AAAA,YACzB,QAAQ;AAAA,cACP,OAAO,YAAY;AAAA,cACnB,UAAU;AAAA,YACX;AAAA,UACD,CAAC;AAED,gBAAM,UAAS,iBAAY,UAAZ,mBAAmB,SAAS,MAAM,IAAI,mCAAS;AAC9D,iBAAM,iCAAQ;AAAA,YACb,WAAW;AAAA,cACV,QAAQ,YAAY;AAAA,cACpB,SAAS,mCAAmC,YAAY;AAAA,cACxD,QAAQ,2CAA2C,YAAY,KAAK;AAAA,YACrE,CAAC;AAAA;AAEF,gBAAM,YAAY,UAAU,EAAE,QAAQ,CAAC,oBAAoB,wCAAwC,CAAC,EAAE,CAAC;AACvG;AAAA,QAED,KAAK;AACJ,gBAAM,QAAQ,MAAM,OAAO,MAAM,WAAW;AAAA,YAC3C,OAAO,EAAE,OAAO,YAAY,QAAQ;AAAA,YACpC,QAAQ,EAAE,UAAU,MAAM,MAAM,KAAK;AAAA,UACtC,CAAC;AAED,cAAI,EAAC,+BAAO,WAAU;AACrB,kBAAM,YAAY,UAAU,EAAE,QAAQ,CAAC,kBAAkB,sDAAsD,CAAC,EAAE,CAAC;AACnH;AAAA,UACD;AAEA,gBAAM,OAAO,MAAM,OAAO;AAAA,YACzB,OAAO,EAAE,OAAO,YAAY,QAAQ;AAAA,YACpC,MAAM,EAAE,UAAU,MAAM;AAAA,UACzB,CAAC;AAED,gBAAM,YAAY,UAAU,EAAE,QAAQ,CAAC,oBAAoB,oCAAoC,CAAC,EAAE,CAAC;AAEnG,gBAAM,WAAU,iBAAY,UAAZ,mBAAmB,SAAS,MAAM,IAAI,+BAAO;AAC7D,iBAAM,mCAAS;AAAA,YACd,WAAW;AAAA,cACV,QAAQ,YAAY;AAAA,cACpB,SAAS,qCAAqC,YAAY;AAAA,cAC1D,QAAQ,6CAA6C,YAAY,KAAK;AAAA,YACvE,CAAC;AAAA;AAEF;AAAA,MACF;AAAA,IACD,QAAE;AACD,YAAM,YAAY,UAAU,YAAY;AAAA,IACzC;AAAA,EACD;AACD;",
  "names": []
}
