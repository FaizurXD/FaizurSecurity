{
  "version": 3,
  "sources": ["../../commands/logs.ts"],
  "sourcesContent": ["import type { ChatInputCommandInteraction, GuildBasedChannel } from 'discord.js';\nimport { SlashCommandBuilder, PermissionFlagsBits, ChannelType } from 'discord.js';\nimport { successEmbedBuilder, errorEmbedBuilder, defaultError } from '../utils.js';\nimport prisma from '../database.js';\n\nexport default class Logger {\n\tdata = new SlashCommandBuilder()\n\t\t.setName('logs')\n\t\t.setDefaultMemberPermissions(PermissionFlagsBits.Administrator)\n\t\t.setDescription('Manage the custom logger to see the actions that your mods and members do in the server')\n\t\t.addSubcommand(subcommand =>\n\t\t\tsubcommand\n\t\t\t\t.setName('on')\n\t\t\t\t.setDescription('Turn logging on and select a channel to send the logs')\n\t\t\t\t.addChannelOption(option => option.setName('channel').setDescription('The channel where all the logs should go.').setRequired(true))\n\t\t)\n\t\t.addSubcommand(subcommand => subcommand.setName('off').setDescription('Turn logging off'));\n\n\tasync run(interaction: ChatInputCommandInteraction) {\n\t\tif (!interaction.inGuild()) {\n\t\t\tawait interaction.reply({ embeds: [errorEmbedBuilder('This command can only be run on a server!')] });\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tawait interaction.deferReply({ ephemeral: true });\n\t\t\tswitch (interaction.options.getSubcommand()) {\n\t\t\t\tcase 'on':\n\t\t\t\t\tconst channel = interaction.options.getChannel('channel') as GuildBasedChannel;\n\n\t\t\t\t\tif (channel.type !== ChannelType.GuildText) {\n\t\t\t\t\t\tawait interaction.editReply({ embeds: [errorEmbedBuilder('The channel must be a Text Channel.')] });\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tawait prisma.guild.upsert({\n\t\t\t\t\t\twhere: {\n\t\t\t\t\t\t\tguild: interaction.guildId,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tupdate: {\n\t\t\t\t\t\t\tlogs: channel.id,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcreate: {\n\t\t\t\t\t\t\tguild: interaction.guildId,\n\t\t\t\t\t\t\tlogs: channel.id,\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\n\t\t\t\t\tawait channel.send({ embeds: [successEmbedBuilder('The logging channel was successfully set here!')] });\n\n\t\t\t\t\tawait interaction.editReply({ embeds: [successEmbedBuilder(`The logs channel has now been set to ${channel}`)] });\n\t\t\t\t\treturn;\n\n\t\t\t\tcase 'off':\n\t\t\t\t\tconst guild = await prisma.guild.findUnique({\n\t\t\t\t\t\twhere: { guild: interaction.guildId },\n\t\t\t\t\t\tselect: { logs: true },\n\t\t\t\t\t});\n\n\t\t\t\t\tif (!guild?.logs) {\n\t\t\t\t\t\tawait interaction.editReply({ embeds: [errorEmbedBuilder('Logs are not turned on in this server')] });\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tawait prisma.guild.update({\n\t\t\t\t\t\twhere: { guild: interaction.guildId },\n\t\t\t\t\t\tdata: { logs: null },\n\t\t\t\t\t});\n\n\t\t\t\t\tawait interaction.editReply({ embeds: [successEmbedBuilder('Deactivated logs on this server!')] });\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t\treturn;\n\t\t} catch (err) {\n\t\t\tconsole.error();\n\t\t\tawait interaction.editReply(defaultError);\n\t\t}\n\t}\n}\n"],
  "mappings": "AACA,SAAS,qBAAqB,qBAAqB,mBAAmB;AACtE,SAAS,qBAAqB,mBAAmB,oBAAoB;AACrE,OAAO,YAAY;AAEnB,qBAAqB,OAAO;AAAA,EAA5B;AACC,gBAAO,IAAI,oBAAoB,EAC7B,QAAQ,MAAM,EACd,4BAA4B,oBAAoB,aAAa,EAC7D,eAAe,yFAAyF,EACxG;AAAA,MAAc,gBACd,WACE,QAAQ,IAAI,EACZ,eAAe,uDAAuD,EACtE,iBAAiB,YAAU,OAAO,QAAQ,SAAS,EAAE,eAAe,2CAA2C,EAAE,YAAY,IAAI,CAAC;AAAA,IACrI,EACC,cAAc,gBAAc,WAAW,QAAQ,KAAK,EAAE,eAAe,kBAAkB,CAAC;AAAA;AAAA,EAE1F,MAAM,IAAI,aAA0C;AACnD,QAAI,CAAC,YAAY,QAAQ,GAAG;AAC3B,YAAM,YAAY,MAAM,EAAE,QAAQ,CAAC,kBAAkB,2CAA2C,CAAC,EAAE,CAAC;AACpG;AAAA,IACD;AAEA,QAAI;AACH,YAAM,YAAY,WAAW,EAAE,WAAW,KAAK,CAAC;AAChD,cAAQ,YAAY,QAAQ,cAAc,GAAG;AAAA,QAC5C,KAAK;AACJ,gBAAM,UAAU,YAAY,QAAQ,WAAW,SAAS;AAExD,cAAI,QAAQ,SAAS,YAAY,WAAW;AAC3C,kBAAM,YAAY,UAAU,EAAE,QAAQ,CAAC,kBAAkB,qCAAqC,CAAC,EAAE,CAAC;AAClG;AAAA,UACD;AAEA,gBAAM,OAAO,MAAM,OAAO;AAAA,YACzB,OAAO;AAAA,cACN,OAAO,YAAY;AAAA,YACpB;AAAA,YACA,QAAQ;AAAA,cACP,MAAM,QAAQ;AAAA,YACf;AAAA,YACA,QAAQ;AAAA,cACP,OAAO,YAAY;AAAA,cACnB,MAAM,QAAQ;AAAA,YACf;AAAA,UACD,CAAC;AAED,gBAAM,QAAQ,KAAK,EAAE,QAAQ,CAAC,oBAAoB,gDAAgD,CAAC,EAAE,CAAC;AAEtG,gBAAM,YAAY,UAAU,EAAE,QAAQ,CAAC,oBAAoB,wCAAwC,SAAS,CAAC,EAAE,CAAC;AAChH;AAAA,QAED,KAAK;AACJ,gBAAM,QAAQ,MAAM,OAAO,MAAM,WAAW;AAAA,YAC3C,OAAO,EAAE,OAAO,YAAY,QAAQ;AAAA,YACpC,QAAQ,EAAE,MAAM,KAAK;AAAA,UACtB,CAAC;AAED,cAAI,EAAC,+BAAO,OAAM;AACjB,kBAAM,YAAY,UAAU,EAAE,QAAQ,CAAC,kBAAkB,uCAAuC,CAAC,EAAE,CAAC;AACpG;AAAA,UACD;AAEA,gBAAM,OAAO,MAAM,OAAO;AAAA,YACzB,OAAO,EAAE,OAAO,YAAY,QAAQ;AAAA,YACpC,MAAM,EAAE,MAAM,KAAK;AAAA,UACpB,CAAC;AAED,gBAAM,YAAY,UAAU,EAAE,QAAQ,CAAC,oBAAoB,kCAAkC,CAAC,EAAE,CAAC;AACjG;AAAA,MACF;AACA;AAAA,IACD,SAAS,KAAP;AACD,cAAQ,MAAM;AACd,YAAM,YAAY,UAAU,YAAY;AAAA,IACzC;AAAA,EACD;AACD;",
  "names": []
}
