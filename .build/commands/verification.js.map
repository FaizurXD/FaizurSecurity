{
  "version": 3,
  "sources": ["../../commands/verification.ts"],
  "sourcesContent": ["import type { ChatInputCommandInteraction, GuildMember, TextChannel } from 'discord.js';\nimport {\n\tSlashCommandBuilder,\n\tEmbedBuilder,\n\tColors,\n\tActionRowBuilder,\n\tButtonBuilder,\n\tButtonStyle,\n\tPermissionFlagsBits,\n\tChannelType,\n} from 'discord.js';\nimport { defaultError, errorEmbedBuilder, logBuilder, successEmbedBuilder } from '../utils.js';\nimport prisma from '../database.js';\n\nexport default class Verification {\n\tdata = new SlashCommandBuilder()\n\t\t.setName('verification')\n\t\t.setDefaultMemberPermissions(PermissionFlagsBits.KickMembers)\n\t\t.setDescription('Set verification in your server and configure it!')\n\t\t.addSubcommand(subcommand =>\n\t\t\tsubcommand\n\t\t\t\t.setName('on')\n\t\t\t\t.setDescription('Turn on verification.')\n\t\t\t\t.addChannelOption(option => option.setName('channel').setDescription('The verification channel').setRequired(true))\n\t\t)\n\t\t.addSubcommand(subcommand => subcommand.setName('off').setDescription('Turn off verification.'));\n\n\tasync run(interaction: ChatInputCommandInteraction) {\n\t\tif (!interaction.inGuild()) {\n\t\t\tawait interaction.reply({ embeds: [errorEmbedBuilder('This command can only be run on a server!')] });\n\t\t\treturn;\n\t\t}\n\n\t\tawait interaction.deferReply({ ephemeral: true });\n\t\ttry {\n\t\t\tswitch (interaction.options.getSubcommand()) {\n\t\t\t\tcase 'on':\n\t\t\t\t\tconst channel = interaction.options.getChannel('channel') as TextChannel;\n\n\t\t\t\t\tif (channel?.type !== ChannelType.GuildText) {\n\t\t\t\t\t\tawait interaction.editReply({ embeds: [errorEmbedBuilder('The channel must be a Text Channel.')] });\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tinteraction.guild?.roles.everyone.setPermissions(\n\t\t\t\t\t\t[PermissionFlagsBits.ReadMessageHistory, PermissionFlagsBits.UseExternalEmojis],\n\t\t\t\t\t\t'Adding verification'\n\t\t\t\t\t);\n\n\t\t\t\t\tconst oldGuild = await prisma.guild.findUnique({\n\t\t\t\t\t\twhere: { guild: interaction.guildId! },\n\t\t\t\t\t\tselect: { members: true },\n\t\t\t\t\t});\n\n\t\t\t\t\tif (!oldGuild?.members) {\n\t\t\t\t\t\tconst role = await interaction.guild?.roles?.create({\n\t\t\t\t\t\t\tname: 'Members',\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tawait prisma.guild.upsert({\n\t\t\t\t\t\t\twhere: { guild: interaction.guildId! },\n\t\t\t\t\t\t\tupdate: { members: role?.id, verificationChannel: channel.id },\n\t\t\t\t\t\t\tcreate: {\n\t\t\t\t\t\t\t\tguild: interaction.guildId!,\n\t\t\t\t\t\t\t\tverificationChannel: channel.id,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tconst guild = await prisma.guild.findUnique({\n\t\t\t\t\t\twhere: { guild: interaction.guildId! },\n\t\t\t\t\t\tselect: { members: true, logs: true },\n\t\t\t\t\t});\n\n\t\t\t\t\tchannel.permissionOverwrites.edit(interaction.guildId!, { ViewChannel: true, SendMessages: false });\n\t\t\t\t\tchannel.permissionOverwrites.edit(guild?.members!, { ViewChannel: false });\n\n\t\t\t\t\tconst verificationButtons = new ActionRowBuilder<ButtonBuilder>({\n\t\t\t\t\t\tcomponents: [\n\t\t\t\t\t\t\tnew ButtonBuilder({\n\t\t\t\t\t\t\t\tlabel: 'Verify',\n\t\t\t\t\t\t\t\tstyle: ButtonStyle.Primary,\n\t\t\t\t\t\t\t\tcustom_id: 'verify',\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t],\n\t\t\t\t\t});\n\n\t\t\t\t\tconst verificationEmbed = new EmbedBuilder({\n\t\t\t\t\t\ttitle: '<:check:1008718056891101194> Verification',\n\t\t\t\t\t\tdescription: `<:1412reply:1009087336828649533> This server is protected by **Pyrite**, no one can gain access without completing a verification system.`,\n\t\t\t\t\t\tcolor: Colors.Blurple,\n\t\t\t\t\t});\n\n\t\t\t\t\tawait channel.send({ embeds: [verificationEmbed], components: [verificationButtons] });\n\t\t\t\t\tawait interaction.editReply({\n\t\t\t\t\t\tembeds: [successEmbedBuilder(`Successfully activated verification! (<@&${guild?.members}> will be assigned once user verifies!)`)],\n\t\t\t\t\t});\n\n\t\t\t\t\tconst onLogs = interaction.guild?.channels.cache.get(guild?.logs!) as TextChannel;\n\t\t\t\t\tonLogs?.send(\n\t\t\t\t\t\tlogBuilder({\n\t\t\t\t\t\t\tmember: interaction.member as GuildMember,\n\t\t\t\t\t\t\tcontent: `${interaction.user} has turned verification on!`,\n\t\t\t\t\t\t\treason: `Verification turned on by ${interaction.user.tag}`,\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'off':\n\t\t\t\t\tconst tempGuild = await prisma.guild.findUnique({\n\t\t\t\t\t\twhere: { guild: interaction.guildId! },\n\t\t\t\t\t\tselect: { verificationChannel: true, logs: true },\n\t\t\t\t\t});\n\t\t\t\t\tconst tempChannel = interaction.guild?.channels?.cache?.get(tempGuild?.verificationChannel!);\n\t\t\t\t\tawait tempChannel?.delete();\n\t\t\t\t\tawait prisma.guild.upsert({\n\t\t\t\t\t\twhere: { guild: interaction.guildId! },\n\t\t\t\t\t\tupdate: { verificationChannel: null },\n\t\t\t\t\t\tcreate: { guild: interaction.guildId! },\n\t\t\t\t\t});\n\t\t\t\t\tawait interaction.editReply({ embeds: [successEmbedBuilder('Successfully deactivated verification in this server!')] });\n\n\t\t\t\t\tconst offLogs = interaction.guild?.channels.cache.get(tempGuild?.logs!) as TextChannel;\n\t\t\t\t\toffLogs?.send(\n\t\t\t\t\t\tlogBuilder({\n\t\t\t\t\t\t\tmember: interaction.member as GuildMember,\n\t\t\t\t\t\t\tcontent: `${interaction.user} has turned verification off!`,\n\t\t\t\t\t\t\treason: `Verification turned off by ${interaction.user.tag}`,\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tawait interaction.editReply(defaultError);\n\t\t\tconsole.error(err);\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
