{
  "version": 3,
  "sources": ["../../commands/warns.ts"],
  "sourcesContent": ["import type { ChatInputCommandInteraction, GuildMember, GuildMemberRoleManager, TextChannel } from 'discord.js';\nimport { SlashCommandBuilder, EmbedBuilder, Colors, PermissionFlagsBits } from 'discord.js';\nimport { defaultError, errorEmbedBuilder, successEmbedBuilder, addWarn, logBuilder } from '../utils.js';\nimport prisma from '../database.js';\n\nexport default class Warns {\n\tdata = new SlashCommandBuilder()\n\t\t.setName('warns')\n\t\t.setDescription('Use this command to manage the warnings in your server!')\n\t\t.setDefaultMemberPermissions(PermissionFlagsBits.KickMembers)\n\t\t.addSubcommand(subcommand =>\n\t\t\tsubcommand\n\t\t\t\t.setName('add')\n\t\t\t\t.setDescription('Add a warning to a user!')\n\t\t\t\t.addUserOption(option => option.setName('member').setDescription('You can pass a mention or an id of a member.').setRequired(true))\n\t\t\t\t.addStringOption(option => option.setName('reason').setDescription('You must provide a reason for this warning').setRequired(true))\n\t\t)\n\t\t.addSubcommand(subcommand =>\n\t\t\tsubcommand\n\t\t\t\t.setName('remove')\n\t\t\t\t.setDescription('Remove a warning from a user!')\n\t\t\t\t.addUserOption(option => option.setName('member').setDescription('You can pass a mention or an id of a member.').setRequired(true))\n\t\t\t\t.addStringOption(option => option.setName('id').setDescription('You must provide the id of the warning you want to delete!'))\n\t\t)\n\t\t.addSubcommand(subcommand =>\n\t\t\tsubcommand\n\t\t\t\t.setName('show')\n\t\t\t\t.setDescription('Show all warnings of a user!')\n\t\t\t\t.addUserOption(option => option.setName('member').setDescription('You can pass a mention or an id of a member.').setRequired(true))\n\t\t);\n\n\tasync run(interaction: ChatInputCommandInteraction) {\n\t\tif (!interaction.inGuild()) {\n\t\t\tawait interaction.reply({ embeds: [errorEmbedBuilder('This command can only be run on a server!')] });\n\t\t\treturn;\n\t\t}\n\n\t\tconst member = interaction.options.getMember('member') as GuildMember | null;\n\n\t\tif (!member) {\n\t\t\tawait interaction.reply({ embeds: [errorEmbedBuilder(\"Couldn't find that member!\")], ephemeral: true });\n\t\t\treturn;\n\t\t}\n\n\t\tswitch (interaction.options.getSubcommand()) {\n\t\t\tcase 'add':\n\t\t\t\tawait addWarn(interaction);\n\t\t\t\tbreak;\n\n\t\t\tcase 'remove':\n\t\t\t\tconst id = interaction.options.getString('id');\n\n\t\t\t\tif (member.user.bot) {\n\t\t\t\t\tawait interaction.reply({ embeds: [errorEmbedBuilder('You cannot remove a warning from a bot!')], ephemeral: true });\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (member.user.id === interaction.user.id) {\n\t\t\t\t\tawait interaction.reply({ embeds: [errorEmbedBuilder('You cannot remove warnings yourself!')], ephemeral: true });\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tawait interaction.deferReply({ ephemeral: true });\n\n\t\t\t\ttry {\n\t\t\t\t\tconst guild = await prisma.guild.findUnique({\n\t\t\t\t\t\twhere: { guild: interaction.guildId! },\n\t\t\t\t\t\tselect: { mods: true, admins: true, logs: true },\n\t\t\t\t\t});\n\n\t\t\t\t\tconst roles = interaction.member?.roles as GuildMemberRoleManager;\n\n\t\t\t\t\tif (!(roles.cache.has(guild?.mods!) || guild?.admins.includes(interaction.user.id) || interaction.user.id === interaction.guild?.ownerId)) {\n\t\t\t\t\t\tawait interaction.editReply({ embeds: [errorEmbedBuilder(\"You don't have permission to remove warnings from members!\")] });\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst user = await prisma.user.findUnique({\n\t\t\t\t\t\twhere: { user: member.user.id },\n\t\t\t\t\t\tselect: { warns: true },\n\t\t\t\t\t});\n\n\t\t\t\t\tconst warns = user?.warns;\n\n\t\t\t\t\tif (!warns?.length) {\n\t\t\t\t\t\tawait interaction.editReply({ embeds: [errorEmbedBuilder(\"This user doesn't have any warnings\")] });\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!id) {\n\t\t\t\t\t\tconst newWarns = warns.filter(warn => warn.guild !== member.guild.id);\n\t\t\t\t\t\tawait prisma.user.update({\n\t\t\t\t\t\t\twhere: { user: member.user.id },\n\t\t\t\t\t\t\tdata: { warns: newWarns },\n\t\t\t\t\t\t});\n\t\t\t\t\t\tawait interaction.editReply({ embeds: [successEmbedBuilder(`Removed all warnings from ${member.user}`)] });\n\n\t\t\t\t\t\tconst logs = interaction.guild?.channels.cache.get(guild?.logs!) as TextChannel;\n\t\t\t\t\t\tawait logs?.send(\n\t\t\t\t\t\t\tlogBuilder({\n\t\t\t\t\t\t\t\tmember: interaction.member as GuildMember,\n\t\t\t\t\t\t\t\tcontent: `${interaction.user} has removed all warns of ${member.user}`,\n\t\t\t\t\t\t\t\treason: `Warns removed by ${interaction.user.tag}`,\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst newWarns = warns.filter(warn => warn.id !== id);\n\t\t\t\t\tif (JSON.stringify(warns) === JSON.stringify(newWarns)) {\n\t\t\t\t\t\tawait interaction.editReply({ embeds: [errorEmbedBuilder(`Warning with id **${id}** has not been found!`)] });\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tawait prisma.user.update({\n\t\t\t\t\t\twhere: { user: member.user.id },\n\t\t\t\t\t\tdata: { warns: newWarns },\n\t\t\t\t\t});\n\t\t\t\t\tawait interaction.editReply({ embeds: [successEmbedBuilder(`Removed warning with id **${id}** from ${member.user}`)] });\n\t\t\t\t\tconst logs = interaction.guild?.channels.cache.get(guild?.logs!) as TextChannel;\n\t\t\t\t\tawait logs?.send(\n\t\t\t\t\t\tlogBuilder({\n\t\t\t\t\t\t\tmember: interaction.member as GuildMember,\n\t\t\t\t\t\t\tcontent: `${interaction.user} has removed a warn from ${member.user}`,\n\t\t\t\t\t\t\treason: `Warn removed by ${interaction.user.tag}`,\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\t\t\t\t} catch {\n\t\t\t\t\tawait interaction.editReply(defaultError);\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 'show':\n\t\t\t\tif (member.user.bot) {\n\t\t\t\t\tawait interaction.reply({ embeds: [errorEmbedBuilder('You cannot show warnings for a bot!')], ephemeral: true });\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tawait interaction.deferReply({ ephemeral: true });\n\n\t\t\t\ttry {\n\t\t\t\t\tconst user = await prisma.user.findUnique({\n\t\t\t\t\t\twhere: { user: member.user.id },\n\t\t\t\t\t\tselect: { warns: true },\n\t\t\t\t\t});\n\n\t\t\t\t\tconst warns = user?.warns?.filter(warn => warn.guild === interaction.guildId);\n\n\t\t\t\t\tconst show = new EmbedBuilder({\n\t\t\t\t\t\tauthor: {\n\t\t\t\t\t\t\tname: interaction.guild?.name!,\n\t\t\t\t\t\t\ticon_url: interaction.guild?.iconURL()!,\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttitle: '<:warn:1009191992040894657> Warnings',\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t(warns?.length ?? 0) === 0\n\t\t\t\t\t\t\t\t? `> ${member.user} doesn't have any warnings!`\n\t\t\t\t\t\t\t\t: `> ${warns?.length === 1 ? `This is the warning` : `These are the ${warns?.length ?? 0} warnings`} that ${member.user} has!`,\n\t\t\t\t\t\tfields: warns?.map(warn => ({ name: warn.id, value: `<:blank:1008721958210383902> <:arrow:1009057573590290452> ${warn.reason}` })),\n\t\t\t\t\t\tcolor: Colors.Blurple,\n\t\t\t\t\t});\n\n\t\t\t\t\tawait interaction.editReply({ embeds: [show] });\n\t\t\t\t} catch {\n\t\t\t\t\tawait interaction.editReply(defaultError);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": ["newWarns", "logs"]
}
