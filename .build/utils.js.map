{
  "version": 3,
  "sources": ["../utils.ts"],
  "sourcesContent": ["import type { Client, GuildMember, CommandInteraction, TextChannel, GuildMemberRoleManager } from 'discord.js';\nimport { ActionRowBuilder, ButtonBuilder, ButtonStyle, AttachmentBuilder, EmbedBuilder, Colors, ActivityType } from 'discord.js';\nimport fetch from 'node-fetch';\nimport { google } from 'googleapis';\nimport { fileURLToPath } from 'node:url';\nimport { dirname, join } from 'node:path';\nimport prisma from './database.js';\n\nexport const dir = dirname(fileURLToPath(import.meta.url));\n\ninterface LogBuilderOptions {\n\tmember: GuildMember;\n\tcontent: string;\n\treason: string;\n}\n\nconst API_KEY = process.env.GOOGLE_API_KEY;\n\nexport const setActivity = (client: Client): void => {\n\tclient.user?.setActivity(`${client.guilds.cache.size} ${client.guilds.cache.size !== 1 ? 'servers' : 'server'} | /setup`, {\n\t\ttype: ActivityType.Watching,\n\t});\n};\n\nexport const loadImage = async (image: string): Promise<Buffer> => {\n\tconst res = await fetch(image);\n\treturn Buffer.from(await res.arrayBuffer());\n};\n\nexport const analyzeText = async (text: string) => {\n\tconst DISCOVERY_URL = 'https://commentanalyzer.googleapis.com/$discovery/rest?version=v1alpha1';\n\n\tconst analyzeRequest = {\n\t\tcomment: { text },\n\t\trequestedAttributes: {\n\t\t\tTOXICITY: {},\n\t\t},\n\t};\n\n\tconst client: Readonly<{\n\t\tcomments: {\n\t\t\tanalyze: (opts: { key: string | undefined; resource: typeof analyzeRequest }) => Promise<{\n\t\t\t\tdata: { attributeScores: { TOXICITY: { summaryScore: { value: number } } } };\n\t\t\t}>;\n\t\t};\n\t}> = await google.discoverAPI(DISCOVERY_URL);\n\n\tconst response = await client.comments.analyze({\n\t\tkey: API_KEY,\n\t\tresource: analyzeRequest,\n\t});\n\n\treturn response.data.attributeScores.TOXICITY.summaryScore.value * 100;\n};\n\nexport const buttons = new ActionRowBuilder<ButtonBuilder>({\n\tcomponents: [\n\t\tnew ButtonBuilder({\n\t\t\tlabel: 'Invite Me',\n\t\t\tstyle: ButtonStyle.Link,\n\t\t\turl: 'https://discord.com/oauth2/authorize?client_id=1008400801628164096&permissions=8&scope=bot%20applications.commands',\n\t\t}),\n\t\tnew ButtonBuilder({\n\t\t\tlabel: 'Support Server',\n\t\t\tstyle: ButtonStyle.Link,\n\t\t\turl: 'https://discord.gg/C8bpMPwJen',\n\t\t}),\n\t\tnew ButtonBuilder({\n\t\t\tlabel: 'Website',\n\t\t\tstyle: ButtonStyle.Link,\n\t\t\turl: 'https://pyritebot.netlify.app/',\n\t\t}),\n\t],\n});\n\nexport const errorEmbedBuilder = (message: string) =>\n\tnew EmbedBuilder({\n\t\tdescription: `<:error:1009134465995509810> ${message}`,\n\t\tcolor: Colors.Blurple,\n\t});\n\nexport const successEmbedBuilder = (message: string) =>\n\tnew EmbedBuilder({\n\t\tdescription: `<:check:1008718056891101194> ${message}`,\n\t\tcolor: Colors.Blurple,\n\t});\n\nexport const warnEmbedBuilder = (message: string) =>\n\tnew EmbedBuilder({\n\t\tdescription: `<:warn:1009191992040894657> ${message}`,\n\t\tcolor: Colors.Blurple,\n\t});\n\nexport const logBuilder = ({ member, content, reason }: LogBuilderOptions) => {\n\tconst embed = new EmbedBuilder({\n\t\tdescription: `<:arrow:1009057573590290452> ${content} \\n <:arrow:1009057573590290452> **Executor:** ${\n\t\t\tmember.user\n\t\t} \\n <:arrow:1009057573590290452> **Reason:** **\\`${reason}\\`**\\n <:arrow:1009057573590290452> **Time:** <t:${Math.floor(Date.now() / 1000)}:R> `,\n\t\tauthor: {\n\t\t\tname: member.user.tag,\n\t\t\ticon_url: member.user.displayAvatarURL(),\n\t\t},\n\t\tfooter: {\n\t\t\ttext: member.guild.name,\n\t\t\ticon_url: member.guild.iconURL()!,\n\t\t},\n\t\ttimestamp: new Date().toISOString(),\n\t\tcolor: Colors.Blurple,\n\t});\n\treturn {\n\t\tembeds: [embed],\n\t};\n};\n\nexport const addReport = async (interaction: CommandInteraction) => {\n\tconst user = interaction.options.getUser('user', true);\n\tconst reason = interaction.options.get('reason', true).value;\n\tconst file = interaction.options.get('image', true).attachment;\n\n\tif (user?.id === interaction.user.id) {\n\t\tawait interaction.reply({ embeds: [errorEmbedBuilder(\"You can't report yourself!\")] });\n\t\treturn;\n\t}\n\n\tconst reportSubmittedEmbed = new EmbedBuilder({\n\t\ttitle: '<:check:1008718056891101194> Report Submitted',\n\t\tdescription: `Your report was submitted and our staff team will be looking into it.\nThank you for submitting this report. For more updates please join our support server below. Please also keep your DMS on so we can easly send you feedback.`,\n\t\tcolor: Colors.Blurple,\n\t});\n\n\tawait interaction.reply({\n\t\tembeds: [reportSubmittedEmbed],\n\t\tcomponents: [\n\t\t\tnew ActionRowBuilder<ButtonBuilder>({\n\t\t\t\tcomponents: [new ButtonBuilder({ label: 'Support Server', style: ButtonStyle.Link, url: 'https://discord.gg/NxJzWWqhdQ' })],\n\t\t\t}),\n\t\t],\n\t\tephemeral: true,\n\t});\n\tconst channel = interaction.client.channels.cache.get('1022909267440828466') as TextChannel;\n\n\tawait channel?.send({\n\t\tembeds: [\n\t\t\tnew EmbedBuilder({\n\t\t\t\tcolor: Colors.Blurple,\n\t\t\t\ttitle: '<:arrow:1009057573590290452> New Report!',\n\t\t\t\tdescription: `<:1412reply:1009087336828649533>*New report for ${user}* \\n\\n **Reason:** ${reason}`,\n\t\t\t\timage: {\n\t\t\t\t\turl: 'attachment://report.png',\n\t\t\t\t},\n\t\t\t}),\n\t\t],\n\t\tfiles: [new AttachmentBuilder(file?.url!, { name: 'report.png' })],\n\t\tcomponents: [\n\t\t\tnew ActionRowBuilder<ButtonBuilder>({\n\t\t\t\tcomponents: [\n\t\t\t\t\tnew ButtonBuilder({\n\t\t\t\t\t\tcustom_id: `report_approve-${reason}-${user?.id}`,\n\t\t\t\t\t\tlabel: 'Approve',\n\t\t\t\t\t\tstyle: ButtonStyle.Success,\n\t\t\t\t\t}),\n\t\t\t\t\tnew ButtonBuilder({\n\t\t\t\t\t\tcustom_id: `report_reject`,\n\t\t\t\t\t\tlabel: 'Ignore',\n\t\t\t\t\t\tstyle: ButtonStyle.Danger,\n\t\t\t\t\t}),\n\t\t\t\t],\n\t\t\t}),\n\t\t],\n\t});\n};\n\nexport const addWarn = async (interaction: CommandInteraction) => {\n\tconst member = interaction.options.getMember('member') as GuildMember;\n\tconst reason = interaction.options.get('reason', true).value as string;\n\n\tif (!member) {\n\t\tawait interaction.reply({ embeds: [errorEmbedBuilder(\"Couldn't find that member!\")], ephemeral: true });\n\t\treturn;\n\t}\n\n\tif (member.user.bot) {\n\t\tawait interaction.reply({ embeds: [errorEmbedBuilder('You cannot warn a bot!')], ephemeral: true });\n\t\treturn;\n\t}\n\n\tif (member.user.id === interaction.user.id) {\n\t\tawait interaction.reply({ embeds: [errorEmbedBuilder('You cannot warn yourself!')], ephemeral: true });\n\t\treturn;\n\t}\n\n\tif (member.user.id === member.guild.ownerId) {\n\t\tawait interaction.reply({ embeds: [errorEmbedBuilder('You cannot warn the owner of the server!')], ephemeral: true });\n\t\treturn;\n\t}\n\n\tawait interaction.deferReply({ ephemeral: true });\n\n\ttry {\n\t\tconst guild = await prisma.guild.findUnique({\n\t\t\twhere: { guild: interaction.guildId! },\n\t\t\tselect: { mods: true, admins: true, owners: true },\n\t\t});\n\n\t\tconst roles = interaction.member?.roles as GuildMemberRoleManager;\n\n\t\tif (\n\t\t\t!(\n\t\t\t\troles.cache.has(guild?.mods!) ||\n\t\t\t\tguild?.admins.includes(interaction.user.id) ||\n\t\t\t\tguild?.owners.includes(interaction.user.id) ||\n\t\t\t\tinteraction.user.id === interaction.guild?.ownerId\n\t\t\t)\n\t\t) {\n\t\t\tawait interaction.editReply({ embeds: [errorEmbedBuilder(\"You don't have permission to warn members!\")] });\n\t\t\treturn;\n\t\t}\n\n\t\tif (guild?.admins.includes(member.user.id) && interaction.user.id !== member.guild.ownerId) {\n\t\t\tawait interaction.editReply({ embeds: [errorEmbedBuilder('You cannot warn an admin!')] });\n\t\t\treturn;\n\t\t}\n\n\t\tawait prisma.user.upsert({\n\t\t\twhere: { user: member.user.id },\n\t\t\tupdate: {\n\t\t\t\twarns: {\n\t\t\t\t\tpush: { guild: interaction.guildId!, reason },\n\t\t\t\t},\n\t\t\t},\n\t\t\tcreate: {\n\t\t\t\tuser: member.user.id,\n\t\t\t\twarns: [{ guild: interaction.guildId!, reason }],\n\t\t\t},\n\t\t});\n\t} catch {\n\t\tawait interaction.editReply(defaultError);\n\t\treturn;\n\t}\n\n\ttry {\n\t\tawait member.send({ embeds: [warnEmbedBuilder(`You have been warned in **${member.guild.name}** for **${reason}**!`)] });\n\t} catch {}\n\n\tawait interaction.editReply({ embeds: [successEmbedBuilder(`${member.user} was successfully warned for **${reason}**!`)] });\n\n\tconst guild = await prisma.guild.findUnique({\n\t\twhere: { guild: interaction.guildId! },\n\t\tselect: { logs: true },\n\t});\n\n\tconst logs = interaction.guild?.channels.cache.get(guild?.logs!) as TextChannel;\n\tawait logs?.send(\n\t\tlogBuilder({\n\t\t\tmember: interaction.member as GuildMember,\n\t\t\tcontent: `${member.user} has been warned by ${interaction.user}`,\n\t\t\treason,\n\t\t})\n\t);\n};\n\nexport const optionButtons = (id: string) =>\n\tnew ActionRowBuilder<ButtonBuilder>({\n\t\tcomponents: [\n\t\t\tnew ButtonBuilder({\n\t\t\t\tlabel: 'Yes',\n\t\t\t\tstyle: ButtonStyle.Primary,\n\t\t\t\tcustom_id: `${id}_yes`,\n\t\t\t}),\n\t\t\tnew ButtonBuilder({\n\t\t\t\tlabel: 'No',\n\t\t\t\tstyle: ButtonStyle.Danger,\n\t\t\t\tcustom_id: `${id}_no`,\n\t\t\t}),\n\t\t],\n\t});\n\nexport const defaultError = {\n\tfiles: [new AttachmentBuilder(join(process.cwd(), './assets/defaultError.png'), { name: 'error.png' })],\n\tcomponents: [buttons],\n\tephemeral: true,\n};\n"],
  "mappings": "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",
  "names": ["guild"]
}
