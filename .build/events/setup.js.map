{
  "version": 3,
  "sources": ["../../events/setup.ts"],
  "sourcesContent": ["import type { Interaction } from 'discord.js';\nimport { PermissionFlagsBits, Events, EmbedBuilder, Colors, ActionRowBuilder, ButtonBuilder, ButtonStyle } from 'discord.js';\nimport { optionButtons, successEmbedBuilder } from '../utils.js';\nimport prisma from '../database.js';\n\nexport default class Setup {\n\tname = Events.InteractionCreate;\n\n\tasync run(interaction: Interaction) {\n\t\tif (!interaction.isButton()) return;\n\t\tif (interaction.customId === 'antispam_yes') {\n\t\t\tawait interaction.deferReply();\n\t\t\tawait prisma.guild.upsert({\n\t\t\t\twhere: { guild: interaction.guildId! },\n\t\t\t\tupdate: { antiSpam: true },\n\t\t\t\tcreate: { guild: interaction.guildId!, antiSpam: true },\n\t\t\t});\n\t\t} else if (interaction.customId === 'antispam_no') {\n\t\t\tawait interaction.deferReply();\n\t\t\tawait prisma.guild.update({\n\t\t\t\twhere: { guild: interaction.guildId! },\n\t\t\t\tdata: { antiSpam: false },\n\t\t\t});\n\t\t}\n\n\t\tif (interaction.customId === 'antispam_yes' || interaction.customId === 'antispam_no') {\n\t\t\tconst embed = new EmbedBuilder({\n\t\t\t\ttitle: ':speech_balloon: Anti Toxicity',\n\t\t\t\tdescription: '> Ok, Would you like to use our effective anti toxicity system to mantain a PG-13 environment in the server?',\n\t\t\t\tcolor: Colors.Blurple,\n\t\t\t});\n\n\t\t\tawait interaction.editReply({ embeds: [embed], components: [optionButtons('antitoxicity')] });\n\t\t}\n\n\t\tif (interaction.customId === 'antitoxicity_yes') {\n\t\t\tawait interaction.deferReply();\n\t\t\tawait prisma.guild.upsert({\n\t\t\t\twhere: { guild: interaction.guildId! },\n\t\t\t\tupdate: { toxicityFilter: true },\n\t\t\t\tcreate: { guild: interaction.guildId!, toxicityFilter: true },\n\t\t\t});\n\t\t} else if (interaction.customId === 'antitoxicity_no') {\n\t\t\tawait interaction.deferReply();\n\t\t\tawait prisma.guild.update({\n\t\t\t\twhere: { guild: interaction.guildId! },\n\t\t\t\tdata: { toxicityFilter: false },\n\t\t\t});\n\t\t}\n\n\t\tif (interaction.customId === 'antitoxicity_yes' || interaction.customId === 'antitoxicity_no') {\n\t\t\tconst embed = new EmbedBuilder({\n\t\t\t\ttitle: ':scroll: Logger',\n\t\t\t\tdescription: '> Nice!, Would you like to use the logger to know how your moderators use this bot?',\n\t\t\t\tcolor: Colors.Blurple,\n\t\t\t});\n\n\t\t\tawait interaction.editReply({ embeds: [embed], components: [optionButtons('logger')] });\n\t\t}\n\n\t\tif (interaction.customId === 'logger_yes') {\n\t\t\tawait interaction.deferReply();\n\t\t\tconst logsChannel = await interaction.guild?.channels.create({\n\t\t\t\tname: 'logs',\n\t\t\t\tpermissionOverwrites: [\n\t\t\t\t\t{\n\t\t\t\t\t\tid: interaction.guildId!,\n\t\t\t\t\t\tdeny: [PermissionFlagsBits.ViewChannel],\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t});\n\t\t\tawait prisma.guild.upsert({\n\t\t\t\twhere: { guild: interaction.guildId! },\n\t\t\t\tupdate: { logs: logsChannel?.id! },\n\t\t\t\tcreate: { guild: interaction.guildId!, logs: logsChannel?.id! },\n\t\t\t});\n\t\t} else if (interaction.customId === 'logger_no') {\n\t\t\tawait interaction.deferReply();\n\t\t\tawait prisma.guild.update({\n\t\t\t\twhere: { guild: interaction.guildId! },\n\t\t\t\tdata: { logs: null },\n\t\t\t});\n\t\t}\n\n\t\tif (interaction.customId === 'logger_yes' || interaction.customId === 'logger_no') {\n\t\t\tconst embed = new EmbedBuilder({\n\t\t\t\ttitle: '<:check:1008718056891101194> Verification',\n\t\t\t\tdescription:\n\t\t\t\t\t'> Perfect!, Would you also like to set up verification in this server? (this will create a members role and verification channel, if you want to customize it use the `/verification` and `/whitelist` commands), please note that setting up verification will remove permissions from everyone role.',\n\t\t\t\tcolor: Colors.Blurple,\n\t\t\t});\n\n\t\t\tawait interaction.editReply({ embeds: [embed], components: [optionButtons('verification')] });\n\t\t}\n\n\t\tif (interaction.customId === 'verification_yes') {\n\t\t\tawait interaction.deferReply();\n\n\t\t\tinteraction.guild?.roles.everyone.setPermissions(\n\t\t\t\t[PermissionFlagsBits.ReadMessageHistory, PermissionFlagsBits.UseExternalEmojis],\n\t\t\t\t'Adding verification'\n\t\t\t);\n\n\t\t\tconst oldGuild = await prisma.guild.findUnique({\n\t\t\t\twhere: { guild: interaction.guildId! },\n\t\t\t\tselect: { members: true },\n\t\t\t});\n\n\t\t\tif (!oldGuild?.members) {\n\t\t\t\tconst role = await interaction.guild?.roles.create({\n\t\t\t\t\tname: 'Members',\n\t\t\t\t});\n\n\t\t\t\tawait prisma.guild.upsert({\n\t\t\t\t\twhere: { guild: interaction.guildId! },\n\t\t\t\t\tupdate: { members: role?.id },\n\t\t\t\t\tcreate: { guild: interaction.guildId!, members: role?.id },\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst { members } = (await prisma.guild.findUnique({\n\t\t\t\twhere: { guild: interaction.guildId! },\n\t\t\t\tselect: { members: true },\n\t\t\t}))!;\n\n\t\t\tconst role = interaction.guild?.roles.cache.get(members!);\n\t\t\trole?.setPermissions([\n\t\t\t\tPermissionFlagsBits.ViewChannel,\n\t\t\t\tPermissionFlagsBits.CreateInstantInvite,\n\t\t\t\tPermissionFlagsBits.ChangeNickname,\n\t\t\t\tPermissionFlagsBits.SendMessages,\n\t\t\t\tPermissionFlagsBits.SendMessagesInThreads,\n\t\t\t\tPermissionFlagsBits.CreatePublicThreads,\n\t\t\t\tPermissionFlagsBits.CreatePrivateThreads,\n\t\t\t\tPermissionFlagsBits.EmbedLinks,\n\t\t\t\tPermissionFlagsBits.AttachFiles,\n\t\t\t\tPermissionFlagsBits.AddReactions,\n\t\t\t\tPermissionFlagsBits.UseExternalEmojis,\n\t\t\t\tPermissionFlagsBits.UseExternalStickers,\n\t\t\t\tPermissionFlagsBits.ReadMessageHistory,\n\t\t\t\tPermissionFlagsBits.UseApplicationCommands,\n\t\t\t\tPermissionFlagsBits.Connect,\n\t\t\t\tPermissionFlagsBits.Speak,\n\t\t\t\tPermissionFlagsBits.Stream,\n\t\t\t\tPermissionFlagsBits.UseEmbeddedActivities,\n\t\t\t\tPermissionFlagsBits.UseVAD,\n\t\t\t]);\n\n\t\t\tconst verificationChannel = await interaction.guild?.channels.create({\n\t\t\t\tname: 'verification',\n\t\t\t\tpermissionOverwrites: [\n\t\t\t\t\t{\n\t\t\t\t\t\tid: interaction.guildId!,\n\t\t\t\t\t\tallow: [PermissionFlagsBits.ViewChannel],\n\t\t\t\t\t\tdeny: [PermissionFlagsBits.SendMessages],\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tid: members!,\n\t\t\t\t\t\tdeny: [PermissionFlagsBits.ViewChannel],\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t});\n\n\t\t\tconst verificationButtons = new ActionRowBuilder<ButtonBuilder>({\n\t\t\t\tcomponents: [\n\t\t\t\t\tnew ButtonBuilder({\n\t\t\t\t\t\tlabel: 'Verify',\n\t\t\t\t\t\tstyle: ButtonStyle.Primary,\n\t\t\t\t\t\tcustom_id: 'verify',\n\t\t\t\t\t}),\n\t\t\t\t],\n\t\t\t});\n\n\t\t\tconst verificationEmbed = new EmbedBuilder({\n\t\t\t\ttitle: '<:check:1008718056891101194> Verification',\n\t\t\t\tdescription: `<:1412reply:1009087336828649533> This server is protected by **Pyrite**, no one can gain access without completing a verification system.`,\n\t\t\t\tcolor: Colors.Blurple,\n\t\t\t});\n\n\t\t\tawait verificationChannel?.send({ embeds: [verificationEmbed], components: [verificationButtons] });\n\n\t\t\tawait prisma.guild.upsert({\n\t\t\t\twhere: { guild: interaction.guildId! },\n\t\t\t\tupdate: { verificationChannel: verificationChannel?.id },\n\t\t\t\tcreate: { guild: interaction.guildId!, verificationChannel: verificationChannel?.id },\n\t\t\t});\n\t\t}\n\n\t\tif (interaction.customId === 'verification_yes' || interaction.customId === 'verification_no') {\n\t\t\tconst embed = new EmbedBuilder({\n\t\t\t\ttitle: '<:check:1008718056891101194> Anti Raid',\n\t\t\t\tdescription: '> Perfect!, would you like to activate the Anti Raid Sytem?',\n\t\t\t\tcolor: Colors.Blurple,\n\t\t\t});\n\n\t\t\tawait interaction.editReply({ embeds: [embed], components: [optionButtons('antiraid')] });\n\t\t}\n\n\t\tif (interaction.customId === 'antiraid_yes') {\n\t\t\tawait interaction.deferReply();\n\t\t\tawait prisma.guild.upsert({\n\t\t\t\twhere: { guild: interaction.guildId! },\n\t\t\t\tupdate: { antiRaid: true },\n\t\t\t\tcreate: { guild: interaction.guildId!, antiRaid: true },\n\t\t\t});\n\t\t}\n\n\t\tif (interaction.customId === 'antiraid_yes' || interaction.customId === 'antiraid_no') {\n\t\t\tawait interaction.editReply({ embeds: [successEmbedBuilder('Setup completed! This channel will be deleted in 5 seconds.')] });\n\n\t\t\tsetTimeout(async () => {\n\t\t\t\tawait interaction.channel?.delete();\n\t\t\t}, 5000);\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": ["role", "_a"]
}
