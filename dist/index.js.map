{
  "version": 3,
  "sources": ["../index.ts"],
  "sourcesContent": ["import {\n  AttachmentBuilder,\n  ChatInputCommandInteraction,\n  Client,\n  Collection,\n  EmbedBuilder,\n  GatewayIntentBits,\n  REST,\n  Routes,\n  SlashCommandBuilder,\n  TextChannel,\n  VoiceChannel,\n} from \"discord.js\";\n\nimport {\n  buttons,\n  defaultError,\n  dir,\n  errorEmbedBuilder,\n  setActivity,\n  successEmbedBuilder,\n} from \"./utils.js\";\nimport { readdir } from \"node:fs/promises\";\nimport { join } from \"node:path\";\nimport emojis from \"./emojis.js\";\nimport prisma from \"./database.js\";\nimport Fastify from \"fastify\";\nimport { z } from \"zod\";\n\nconst envVariables = z.object({\n  TOKEN: z.string(),\n  DATABASE_URL: z.string(),\n  GOOGLE_API_KEY: z.string(),\n});\n\nenvVariables.parse(process.env);\n\ndeclare global {\n  namespace NodeJS {\n    // biome-ignore lint/suspicious/noEmptyInterface: Infering from zod's types.\n    interface ProcessEnv extends z.infer<typeof envVariables> {}\n  }\n}\n\nconst TOKEN = process.env.TOKEN;\n\ninterface ICommand {\n  data: SlashCommandBuilder;\n  run(interaction: ChatInputCommandInteraction): Promise<void>;\n}\n\ninterface IEvent {\n  name: string;\n  run(x: unknown): Promise<void>;\n}\n\nconst rest = new REST().setToken(TOKEN);\n\nconst commands = new Collection<string, ICommand>();\n\nconst client = new Client({\n  intents: [\n    GatewayIntentBits.Guilds,\n    GatewayIntentBits.GuildMessages,\n    GatewayIntentBits.GuildMembers,\n    GatewayIntentBits.GuildModeration,\n    GatewayIntentBits.MessageContent,\n    GatewayIntentBits.DirectMessages,\n  ],\n});\n\nclient.once(\"ready\", async () => {\n  setActivity(client);\n  console.log(`logged in as ${client.user?.tag}`);\n  console.log(`client in ${client.guilds.cache.size} servers`);\n});\n\nclient.on(\"guildCreate\", async (guild) => {\n  setActivity(client);\n  const embed = new EmbedBuilder({\n    title: \"<:list:1030927155472904283> Welcome to Pyrite Bot\",\n    description:\n      `<:reply:1067159718646263910> Thank you for choosing **Pyrite Bot**, I will make sure to try my best to protect your server from raider's, spammer's and so much more.\n   \nYou can configure me on the dashboard below this message. Need more servers protected? Add me to any server you think needs protection!\n\n`,\n    color: 0x2b2d31,\n    image: {\n      url: \"attachment://pyritebot.png\",\n    },\n  });\n  const owner = await guild.fetchOwner();\n  await owner\n    .send({\n      embeds: [embed],\n      files: [\n        new AttachmentBuilder(join(process.cwd(), \"./assets/pyritebot.png\")),\n      ],\n      components: [buttons],\n    })\n    .catch(() => {});\n});\n\nclient.on(\"guildDelete\", () => setActivity(client));\n\nclient.on(\"interactionCreate\", async (interaction) => {\n  if (!interaction.isChatInputCommand()) return;\n  const command = commands.get(interaction.commandName);\n  await command?.run(interaction);\n});\n\nclient.on(\"interactionCreate\", async (interaction) => {\n  if (!interaction.isButton()) return;\n  if (interaction.customId !== \"lockdown_continue\") return;\n\n  if (!interaction.inGuild()) {\n    await interaction.reply({\n      embeds: [errorEmbedBuilder(\"This command can only be run on a server!\")],\n    });\n    return;\n  }\n\n  try {\n    await interaction.deferReply({ ephemeral: true });\n\n    const channel = (await interaction.guild?.channels.create({\n      name: \"server-lockdown\",\n    })) as TextChannel | VoiceChannel;\n\n    interaction.guild?.channels.cache.forEach((ch) => {\n      const c = ch as TextChannel | VoiceChannel;\n      interaction.guild?.roles.cache\n        .filter((role) => role.id !== \"@everyone\")\n        .forEach((role) =>\n          c.permissionOverwrites.edit(role.id, { SendMessages: false })\n        );\n    });\n\n    const lockdownEmbed = new EmbedBuilder({\n      title: `${emojis.lock} Lockdown`,\n      description:\n        `${emojis.reply1} This server is currently on lockdown. Meaning no one can chat in this server. Please wait until the owners unlock the server.`,\n      color: 0x2b2d31,\n      footer: {\n        icon_url: interaction.guild?.iconURL() ?? \"\",\n        text: interaction.guild?.name ?? \"\",\n      },\n      timestamp: new Date().toISOString(),\n    });\n\n    const message = await channel?.send({ embeds: [lockdownEmbed] });\n\n    await prisma.guild.upsert({\n      where: { guild: interaction.guildId },\n      update: {\n        raidMode: true,\n        lockdownChannel: channel?.id,\n        lockdownMessage: message?.id,\n      },\n      create: {\n        guild: interaction.guildId,\n        raidMode: true,\n        lockdownChannel: channel?.id,\n        lockdownMessage: message?.id,\n      },\n    });\n\n    await interaction.editReply({\n      embeds: [successEmbedBuilder(\"lockdown was successfully activated\")],\n    });\n  } catch {\n    await interaction.editReply(defaultError);\n  }\n});\n\nconst registerCommands = async () => {\n  const files = await readdir(join(dir, \"./commands\"));\n  files\n    .filter((file) => file.endsWith(\".js\"))\n    .forEach(async (file) => {\n      const { default: Command }: { default: new () => ICommand } =\n        await import(join(dir, `./commands/${file}`));\n      const command = new Command();\n      commands.set(command.data.name, command);\n    });\n};\n\nconst registerEvents = async () => {\n  const files = await readdir(join(dir, \"./events\"));\n  files\n    .filter((file) => file.endsWith(\".js\"))\n    .forEach(async (file) => {\n      const { default: Event }: { default: new () => IEvent } = await import(\n        join(dir, `./events/${file}`)\n      );\n      const event = new Event();\n      client.on(event.name, event.run.bind(event));\n    });\n};\n\nconst server = Fastify();\n\nserver.get(\"/\", async () => \"Bot hosting running correctly!\");\n\ntry {\n  await registerCommands();\n  await registerEvents();\n  await client.login(TOKEN);\n  await server.listen({ port: 3000, host: \"0.0.0.0\" });\n  await rest.put(Routes.applicationCommands(client.user?.id ?? \"\"), {\n    body: commands.map(({ data }) => data.toJSON()),\n  });\n} catch (err) {\n  console.error(err);\n}\n"],
  "mappings": "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",
  "names": ["_a"]
}
