{
  "version": 3,
  "sources": ["../utils.ts"],
  "sourcesContent": ["import type {\n\tClient,\n\tGuildMember,\n\tGuild,\n\tChatInputCommandInteraction,\n\tTextChannel,\n\tGuildMemberRoleManager,\n} from \"discord.js\";\nimport {\n\tActionRowBuilder,\n\tButtonBuilder,\n\tButtonStyle,\n\tAttachmentBuilder,\n\tEmbedBuilder,\n\tColors,\n\tActivityType,\n} from \"discord.js\";\nimport { google } from \"googleapis\";\nimport { fileURLToPath } from \"node:url\";\nimport { dirname, join } from \"node:path\";\nimport prisma from \"./database.js\";\nimport emojis from \"./emojis.js\";\n\nexport const dir = dirname(fileURLToPath(import.meta.url));\n\ninterface LogBuilderOptions {\n\tmember: GuildMember | string;\n\tguild?: Guild;\n\treason: string;\n\tpunished?: boolean;\n}\n\nconst API_KEY = process.env.GOOGLE_API_KEY;\n\nexport const setActivity = (client: Client): void => {\n\tclient.user?.setActivity(\n\t\t`${client.guilds.cache.size} ${\n\t\t\tclient.guilds.cache.size !== 1 ? \"servers\" : \"server\"\n\t\t} | /setup`,\n\t\t{\n\t\t\ttype: ActivityType.Watching,\n\t\t},\n\t);\n};\n\nexport const timeSince = (date: Date) => {\n\tconst now = new Date();\n\tconst secondsPast = (now.getTime() - date.getTime()) / 1000;\n\n\tif (secondsPast < 60) {\n\t\treturn `${secondsPast}s`;\n\t} else if (secondsPast < 3600) {\n\t\treturn `${secondsPast / 60}m`;\n\t} else if (secondsPast <= 86400) {\n\t\treturn `${secondsPast / 3600}h`;\n\t} else if (secondsPast > 86400) {\n\t\tconst day = date.getDate();\n\t\tconst month = date.toDateString().match(/ [a-zA-Z]*/)?.[0].replace(\" \", \"\");\n\t\tconst year =\n\t\t\tdate.getFullYear() === now.getFullYear() ? \"\" : ` ${date.getFullYear()}`;\n\t\treturn `${day} ${month}${year}`;\n\t}\n};\n\nexport const loadImage = async (image: string): Promise<Buffer> => {\n\tconst res = await fetch(image);\n\treturn Buffer.from(await res.arrayBuffer());\n};\n\nexport const getQuarantine = async (guild: Guild) => {\n\tconst oldGuild = await prisma.guild.findUnique({\n\t\twhere: { guild: guild.id },\n\t\tselect: { quarantine: true },\n\t});\n\n\tconst quarantine = guild.roles.cache.get(oldGuild?.quarantine ?? \"\");\n\n\tif (!quarantine) {\n\t\tconst role = await guild.roles.create({\n\t\t\tname: \"Quarantine\",\n\t\t});\n\n\t\trole?.setPermissions([]);\n\n\t\tawait prisma.guild.upsert({\n\t\t\twhere: { guild: guild?.id },\n\t\t\tupdate: { quarantine: role?.id },\n\t\t\tcreate: {\n\t\t\t\tguild: guild.id,\n\t\t\t\tquarantine: role.id,\n\t\t\t},\n\t\t});\n\n\t\treturn role;\n\t}\n\n\treturn quarantine;\n};\n\nexport const analyzeText = async (text: string) => {\n\tconst DISCOVERY_URL =\n\t\t\"https://commentanalyzer.googleapis.com/$discovery/rest?version=v1alpha1\";\n\n\tconst analyzeRequest = {\n\t\tcomment: { text },\n\t\trequestedAttributes: {\n\t\t\tTOXICITY: {},\n\t\t},\n\t};\n\n\tconst client: Readonly<{\n\t\tcomments: {\n\t\t\tanalyze: (opts: {\n\t\t\t\tkey: string | undefined;\n\t\t\t\tresource: typeof analyzeRequest;\n\t\t\t}) => Promise<{\n\t\t\t\tdata: {\n\t\t\t\t\tattributeScores: { TOXICITY: { summaryScore: { value: number } } };\n\t\t\t\t};\n\t\t\t}>;\n\t\t};\n\t}> = await google.discoverAPI(DISCOVERY_URL);\n\n\tconst response = await client.comments.analyze({\n\t\tkey: API_KEY,\n\t\tresource: analyzeRequest,\n\t});\n\n\treturn response.data.attributeScores.TOXICITY.summaryScore.value * 100;\n};\n\nexport const buttons = new ActionRowBuilder<ButtonBuilder>({\n\tcomponents: [\n\t\tnew ButtonBuilder({\n\t\t\tlabel: \"Invite Me\",\n\t\t\tstyle: ButtonStyle.Link,\n\t\t\turl: \"https://discord.com/oauth2/authorize?client_id=1008400801628164096&permissions=8&scope=bot%20applications.commands\",\n\t\t}),\n\t\tnew ButtonBuilder({\n\t\t\tlabel: \"Support Server\",\n\t\t\tstyle: ButtonStyle.Link,\n\t\t\turl: \"https://discord.gg/NxJzWWqhdQ\",\n\t\t}),\n\t\tnew ButtonBuilder({\n\t\t\tlabel: \"Website\",\n\t\t\tstyle: ButtonStyle.Link,\n\t\t\turl: \"https://pyritebot.netlify.app/\",\n\t\t}),\n\t],\n});\n\nexport const errorEmbedBuilder = (message: string) =>\n\tnew EmbedBuilder({\n\t\tdescription: `${emojis.error}  ${message}`,\n\t\tcolor: Colors.DarkRed,\n\t});\n\nexport const successEmbedBuilder = (message: string) =>\n\tnew EmbedBuilder({\n\t\tdescription: `${emojis.check}  ${message}`,\n\t\tcolor: Colors.Green,\n\t});\n\nexport const warnEmbedBuilder = (message: string) =>\n\tnew EmbedBuilder({\n\t\tdescription: `${emojis.warn}  ${message}`,\n\t\tcolor: Colors.Yellow,\n\t});\n\nexport const logBuilder = ({\n\tmember,\n\tguild,\n\treason,\n\tpunished = false,\n}: LogBuilderOptions) => {\n\tconst embed = new EmbedBuilder({\n\t\ttitle: \"<:warn:1027361416119853187> New Alert\",\n\t\tdescription: `\n  <:reply:1067159718646263910> A new Moderator action was just logged below :\n  \n<:arrow:1068604670764916876> **Executor:** ${\n\t\t\t(member as GuildMember)?.user ?? `<@${member}>`\n\t\t}\n<:arrow:1068604670764916876> **Reason:** ${reason}\n<:arrow:1068604670764916876> **Punished:** \\`${punished ? \"Yes\" : \"No\"}\\`\n<:arrow:1068604670764916876> **Time:** <t:${Math.floor(Date.now() / 1000)}:R>`,\n\t\tfooter: {\n\t\t\ttext: (member as GuildMember)?.guild?.name ?? guild?.name,\n\t\t\ticon_url:\n\t\t\t\t(member as GuildMember)?.guild?.iconURL() ??\n\t\t\t\tguild?.iconURL() ??\n\t\t\t\tundefined,\n\t\t},\n\t\tthumbnail: {\n\t\t\turl: (member as GuildMember | null)?.user.displayAvatarURL() ?? \"\",\n\t\t},\n\t\ttimestamp: new Date().toISOString(),\n\t\tcolor: 0x2b2d31,\n\t});\n\treturn {\n\t\tembeds: [embed],\n\t};\n};\n\nexport const punishButtons = (id: string) =>\n\tnew ActionRowBuilder<ButtonBuilder>({\n\t\tcomponents: [\n\t\t\tnew ButtonBuilder({\n\t\t\t\tcustom_id: `punish_kick-${id}`,\n\t\t\t\tlabel: \"Kick\",\n\t\t\t\tstyle: ButtonStyle.Danger,\n\t\t\t}),\n\t\t\tnew ButtonBuilder({\n\t\t\t\tcustom_id: `punish_ban-${id}`,\n\t\t\t\tlabel: \"Ban\",\n\t\t\t\tstyle: ButtonStyle.Danger,\n\t\t\t}),\n\t\t\tnew ButtonBuilder({\n\t\t\t\tcustom_id: `punish_quarantine-${id}`,\n\t\t\t\tlabel: \"Quarantine\",\n\t\t\t\tstyle: ButtonStyle.Secondary,\n\t\t\t}),\n\t\t],\n\t});\n\nexport const addWarn = async (interaction: ChatInputCommandInteraction) => {\n\tconst member = interaction.options.getMember(\"member\") as GuildMember;\n\tconst reason = interaction.options.getString(\"reason\", true);\n\n\tif (!member) {\n\t\tawait interaction.reply({\n\t\t\tembeds: [errorEmbedBuilder(\"Couldn't find that member!\")],\n\t\t\tephemeral: true,\n\t\t});\n\t\treturn;\n\t}\n\n\tif (member.user.bot) {\n\t\tawait interaction.reply({\n\t\t\tembeds: [errorEmbedBuilder(\"You cannot warn a bot!\")],\n\t\t\tephemeral: true,\n\t\t});\n\t\treturn;\n\t}\n\n\tif (member.user.id === interaction.user.id) {\n\t\tawait interaction.reply({\n\t\t\tembeds: [errorEmbedBuilder(\"You cannot warn yourself!\")],\n\t\t\tephemeral: true,\n\t\t});\n\t\treturn;\n\t}\n\n\tif (member.user.id === member.guild.ownerId) {\n\t\tawait interaction.reply({\n\t\t\tembeds: [errorEmbedBuilder(\"You cannot warn the owner of the server!\")],\n\t\t\tephemeral: true,\n\t\t});\n\t\treturn;\n\t}\n\n\tawait interaction.deferReply({ ephemeral: true });\n\n\ttry {\n\t\tconst guild = await prisma.guild.findUnique({\n\t\t\twhere: { guild: interaction.guildId ?? \"\" },\n\t\t\tselect: { mods: true, admins: true, owners: true },\n\t\t});\n\n\t\tconst roles = interaction.member?.roles as GuildMemberRoleManager;\n\n\t\tif (\n\t\t\t!(\n\t\t\t\troles.cache.has(guild?.mods ?? \"\") ||\n\t\t\t\tguild?.admins.includes(interaction.user.id) ||\n\t\t\t\tguild?.owners.includes(interaction.user.id) ||\n\t\t\t\tinteraction.user.id === interaction.guild?.ownerId\n\t\t\t)\n\t\t) {\n\t\t\tawait interaction.editReply({\n\t\t\t\tembeds: [\n\t\t\t\t\terrorEmbedBuilder(\"You don't have permission to warn members!\"),\n\t\t\t\t],\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\tif (\n\t\t\tguild?.admins.includes(member.user.id) &&\n\t\t\tinteraction.user.id !== member.guild.ownerId\n\t\t) {\n\t\t\tawait interaction.editReply({\n\t\t\t\tembeds: [errorEmbedBuilder(\"You cannot warn an admin!\")],\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\tawait prisma.warn.create({\n\t\t\tdata: {\n\t\t\t\tuserId: member.user.id,\n\t\t\t\tguildId: interaction.guildId ?? \"\",\n\t\t\t\treason,\n\t\t\t},\n\t\t});\n\t} catch (err) {\n\t\tconsole.error(err);\n\t\tawait interaction.editReply(defaultError);\n\t\treturn;\n\t}\n\n\tawait member\n\t\t.send({\n\t\t\tembeds: [\n\t\t\t\twarnEmbedBuilder(\n\t\t\t\t\t`You have been warned in **${member.guild.name}** for **${reason}**!`,\n\t\t\t\t),\n\t\t\t],\n\t\t})\n\t\t.catch(() => {});\n\n\tawait interaction.editReply({\n\t\tembeds: [\n\t\t\tsuccessEmbedBuilder(\n\t\t\t\t`${member.user} was successfully warned for **${reason}**!`,\n\t\t\t),\n\t\t],\n\t});\n\n\tconst guild = await prisma.guild.findUnique({\n\t\twhere: { guild: interaction.guildId ?? \"\" },\n\t\tselect: { logs: true },\n\t});\n\n\tconst logs = interaction.guild?.channels.cache.get(\n\t\tguild?.logs ?? \"\",\n\t) as TextChannel;\n\tawait logs?.send(\n\t\tlogBuilder({\n\t\t\tmember: interaction.member as GuildMember,\n\t\t\treason: `${member.user.tag} has been warned by ${interaction.user.tag}: ${reason}`,\n\t\t}),\n\t);\n};\n\nexport const optionButtons = (id: string) =>\n\tnew ActionRowBuilder<ButtonBuilder>({\n\t\tcomponents: [\n\t\t\tnew ButtonBuilder({\n\t\t\t\tlabel: \"Yes\",\n\t\t\t\tstyle: ButtonStyle.Primary,\n\t\t\t\tcustom_id: `${id}_yes`,\n\t\t\t}),\n\t\t\tnew ButtonBuilder({\n\t\t\t\tlabel: \"No\",\n\t\t\t\tstyle: ButtonStyle.Danger,\n\t\t\t\tcustom_id: `${id}_no`,\n\t\t\t}),\n\t\t],\n\t});\n\nexport const defaultError = {\n\tfiles: [\n\t\tnew AttachmentBuilder(join(process.cwd(), \"./assets/error.gif\"), {\n\t\t\tname: \"error.gif\",\n\t\t\tdescription:\n\t\t\t\t\"It seems you stumbled upon an unknown error!, if the problem persists, do not doubt to contact us our support server.\",\n\t\t}),\n\t],\n\tcomponents: [buttons],\n\tephemeral: true,\n};\n"],
  "mappings": "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",
  "names": ["guild"]
}
