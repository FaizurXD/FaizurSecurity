{
  "version": 3,
  "sources": ["../../events/kick.ts"],
  "sourcesContent": ["import type { GuildMember, TextChannel } from \"discord.js\";\nimport { Events, AuditLogEvent, PermissionFlagsBits } from \"discord.js\";\nimport { logBuilder, getQuarantine } from \"../utils.js\";\nimport prisma from \"../database.js\";\n\nexport default class Kick {\n\tname = Events.GuildMemberRemove;\n\n\tstatic times = 0;\n\tstatic timeout = setTimeout(() => {\n\t\tKick.times = 0;\n\t}, 8_000);\n\n\tasync run(member: GuildMember) {\n\t\tconst guild = await prisma.guild.findUnique({\n\t\t\twhere: { guild: member.guild.id },\n\t\t\tselect: { antiRaid: true, logs: true },\n\t\t});\n\n\t\tif (!guild?.antiRaid) return;\n\n\t\tKick.times++;\n\t\tKick.timeout.refresh();\n\n\t\tif (Kick.times % 5 === 0) {\n\t\t\tconst auditLogFetch = await member.guild.fetchAuditLogs({\n\t\t\t\tlimit: 1,\n\t\t\t\ttype: AuditLogEvent.MemberKick,\n\t\t\t});\n\t\t\tconst log = auditLogFetch.entries.first();\n\n\t\t\tif (!log) return;\n\t\t\tif (log.createdAt < (member.joinedAt ?? new Date())) return;\n\t\t\tif (log.target?.id !== member.id) return;\n\n\t\t\tif (member.client.user?.id === log.executor?.id) return;\n\n\t\t\tconst executor = await member.guild.members.fetch(\n\t\t\t\tlog?.executor?.id ?? \"\",\n\t\t\t);\n\t\t\tconst quarantine = await getQuarantine(member.guild);\n\n\t\t\texecutor.roles.cache\n\t\t\t\t.filter((r) => r.id !== member.guild.id)\n\t\t\t\t.forEach(async (r) => {\n\t\t\t\t\tawait executor.roles\n\t\t\t\t\t\t.remove(r, \"Kicking too many users\")\n\t\t\t\t\t\t.catch(async () => {\n\t\t\t\t\t\t\tif (!executor.user.bot) return;\n\t\t\t\t\t\t\tr?.setPermissions([]).catch(() => {});\n\t\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\tif (quarantine) {\n\t\t\t\tawait executor.roles.add(quarantine, \"Kicking too many users\");\n\t\t\t}\n\n\t\t\tawait executor\n\t\t\t\t.timeout(1440 * 60_000, \"Kicking too many users\")\n\t\t\t\t.catch(() => {});\n\n\t\t\tconst logs = member.guild?.channels.cache.get(\n\t\t\t\tguild?.logs ?? \"\",\n\t\t\t) as TextChannel;\n\t\t\tawait logs?.send(\n\t\t\t\tlogBuilder({\n\t\t\t\t\tmember,\n\t\t\t\t\treason: \"Too many users kicked.\",\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\t}\n}\n"],
  "mappings": ";AACA,SAAS,QAAQ,qBAA0C;AAC3D,SAAS,YAAY,qBAAqB;AAC1C,OAAO,YAAY;AAEnB,qBAAqB,KAAK;AAAA,EACzB,OAAO,OAAO;AAAA,EAEd,OAAO,QAAQ;AAAA,EACf,OAAO,UAAU,WAAW,MAAM;AACjC,SAAK,QAAQ;AAAA,EACd,GAAG,GAAK;AAAA,EAER,MAAM,IAAI,QAAqB;AAbhC;AAcE,UAAM,QAAQ,MAAM,OAAO,MAAM,WAAW;AAAA,MAC3C,OAAO,EAAE,OAAO,OAAO,MAAM,GAAG;AAAA,MAChC,QAAQ,EAAE,UAAU,MAAM,MAAM,KAAK;AAAA,IACtC,CAAC;AAED,QAAI,EAAC,+BAAO;AAAU;AAEtB,SAAK;AACL,SAAK,QAAQ,QAAQ;AAErB,QAAI,KAAK,QAAQ,MAAM,GAAG;AACzB,YAAM,gBAAgB,MAAM,OAAO,MAAM,eAAe;AAAA,QACvD,OAAO;AAAA,QACP,MAAM,cAAc;AAAA,MACrB,CAAC;AACD,YAAM,MAAM,cAAc,QAAQ,MAAM;AAExC,UAAI,CAAC;AAAK;AACV,UAAI,IAAI,aAAa,OAAO,YAAY,oBAAI,KAAK;AAAI;AACrD,YAAI,SAAI,WAAJ,mBAAY,QAAO,OAAO;AAAI;AAElC,YAAI,YAAO,OAAO,SAAd,mBAAoB,UAAO,SAAI,aAAJ,mBAAc;AAAI;AAEjD,YAAM,WAAW,MAAM,OAAO,MAAM,QAAQ;AAAA,UAC3C,gCAAK,aAAL,mBAAe,OAAM;AAAA,MACtB;AACA,YAAM,aAAa,MAAM,cAAc,OAAO,KAAK;AAEnD,eAAS,MAAM,MACb,OAAO,CAAC,MAAM,EAAE,OAAO,OAAO,MAAM,EAAE,EACtC,QAAQ,OAAO,MAAM;AACrB,cAAM,SAAS,MACb,OAAO,GAAG,wBAAwB,EAClC,MAAM,YAAY;AAClB,cAAI,CAAC,SAAS,KAAK;AAAK;AACxB,iCAAG,eAAe,CAAC,GAAG,MAAM,MAAM;AAAA,UAAC;AAAA,QACpC,CAAC;AAAA,MACH,CAAC;AAEF,UAAI,YAAY;AACf,cAAM,SAAS,MAAM,IAAI,YAAY,wBAAwB;AAAA,MAC9D;AAEA,YAAM,SACJ,QAAQ,OAAO,KAAQ,wBAAwB,EAC/C,MAAM,MAAM;AAAA,MAAC,CAAC;AAEhB,YAAM,QAAO,YAAO,UAAP,mBAAc,SAAS,MAAM;AAAA,SACzC,+BAAO,SAAQ;AAAA;AAEhB,aAAM,6BAAM;AAAA,QACX,WAAW;AAAA,UACV;AAAA,UACA,QAAQ;AAAA,QACT,CAAC;AAAA;AAAA,IAEH;AAAA,EACD;AACD;",
  "names": []
}
