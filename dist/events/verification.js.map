{
  "version": 3,
  "sources": ["../../events/verification.ts"],
  "sourcesContent": ["import type {\n\tGuildMemberRoleManager,\n\tInteraction,\n\tMessage,\n\tGuildMember,\n\tTextChannel,\n} from \"discord.js\";\nimport {\n\tEvents,\n\tAttachmentBuilder,\n\tEmbedBuilder,\n\tColors,\n\tActionRowBuilder,\n\tButtonBuilder,\n\tButtonStyle,\n} from \"discord.js\";\nimport { CaptchaGenerator } from \"captcha-canvas\";\nimport { successEmbedBuilder, errorEmbedBuilder, buttons } from \"../utils.js\";\nimport emojis from \"../emojis.js\";\nimport prisma from \"../database.js\";\n\nexport default class Verification {\n\tname = Events.InteractionCreate;\n\n\tasync verify(\n\t\ttext: string,\n\t\tinteraction: Interaction,\n\t\tmsg: Message,\n\t\tguild: { quarantine: string | null; members: string | null } | null,\n\t) {\n\t\ttry {\n\t\t\tconst messages = await msg.channel.awaitMessages({\n\t\t\t\tmax: 1,\n\t\t\t\ttime: 10_000,\n\t\t\t\terrors: [\"time\"],\n\t\t\t});\n\n\t\t\tconst roles = interaction.member?.roles as GuildMemberRoleManager | null;\n\n\t\t\tif (messages.first()?.content === text) {\n\t\t\t\tawait msg.channel.send({\n\t\t\t\t\tembeds: [\n\t\t\t\t\t\tsuccessEmbedBuilder(\n\t\t\t\t\t\t\t\"You have been verified successfully, you can now continue to the server!\",\n\t\t\t\t\t\t),\n\t\t\t\t\t],\n\t\t\t\t});\n\t\t\t\tconst quarantine = interaction.guild?.roles.cache.get(\n\t\t\t\t\tguild?.quarantine ?? \"\",\n\t\t\t\t);\n\t\t\t\tif (quarantine) {\n\t\t\t\t\tawait roles?.remove(quarantine);\n\t\t\t\t}\n\t\t\t\tconst members = interaction.guild?.roles.cache.get(\n\t\t\t\t\tguild?.members ?? \"\",\n\t\t\t\t);\n\t\t\t\tif (members) {\n\t\t\t\t\tawait roles?.add(members);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst { message: incorrectEmbed, text: incorrectText } =\n\t\t\t\tawait this.embedBuilder();\n\n\t\t\tawait msg.edit(incorrectEmbed);\n\t\t\tawait this.verify(incorrectText, interaction, msg, guild);\n\t\t} catch {\n\t\t\tconst { message: timeOutEmbed, text: timeOutText } =\n\t\t\t\tawait this.embedBuilder();\n\n\t\t\tawait msg.edit(timeOutEmbed);\n\t\t\tawait this.verify(timeOutText, interaction, msg, guild);\n\t\t}\n\t}\n\n\tasync embedBuilder() {\n\t\tconst captcha = new CaptchaGenerator({ width: 450, height: 150 });\n\t\tcaptcha.setDecoy({ total: 30 });\n\t\tconst buffer = await captcha.generate();\n\n\t\tconst file = new AttachmentBuilder(buffer, { name: \"verification.png\" });\n\t\tconst verificationEmbed = new EmbedBuilder({\n\t\t\ttitle: `${emojis.check} Verification`,\n\t\t\tdescription:\n\t\t\t\t\"Are you a human? Lets find out. Simply type the following captcha below so I can verify that you are human. The captcha will only last 10 seconds so be quick!\",\n\t\t\timage: {\n\t\t\t\turl: \"attachment://verification.png\",\n\t\t\t},\n\t\t\tcolor: 0x2b2d31,\n\t\t});\n\n\t\treturn {\n\t\t\tmessage: {\n\t\t\t\tembeds: [verificationEmbed],\n\t\t\t\tcomponents: [buttons],\n\t\t\t\tfiles: [file],\n\t\t\t},\n\t\t\ttext: captcha.text,\n\t\t};\n\t}\n\n\tasync run(interaction: Interaction) {\n\t\tif (!interaction.inGuild()) return;\n\n\t\tif (!interaction.isButton()) return;\n\t\tif (interaction.customId !== \"verify\") return;\n\n\t\tawait interaction.deferReply({ ephemeral: true });\n\n\t\tconst guild = await prisma.guild.findUnique({\n\t\t\twhere: { guild: interaction.guildId },\n\t\t\tselect: { quarantine: true, members: true, logs: true },\n\t\t});\n\n\t\tconst user = await prisma.user.findUnique({\n\t\t\twhere: { user: interaction.user.id },\n\t\t\tselect: { toxicity: true },\n\t\t});\n\n\t\tif ((user?.toxicity ?? 0) >= 90) {\n\t\t\tawait interaction.editReply({\n\t\t\t\tembeds: [\n\t\t\t\t\terrorEmbedBuilder(\n\t\t\t\t\t\t\"You have been detected as a dangerous user. Please wait until an admin verifies you.\",\n\t\t\t\t\t),\n\t\t\t\t],\n\t\t\t});\n\n\t\t\tconst embed = new EmbedBuilder({\n\t\t\t\ttitle: `${emojis.warn} Toxic User Detected!`,\n\t\t\t\tdescription: `${interaction.user} has a estimate toxicity of **${\n\t\t\t\t\tuser?.toxicity ?? 90\n\t\t\t\t}%**.\n${emojis.blank}${emojis.arrow} What would you like to proceed with? \n${emojis.blank}${emojis.arrow} **Verification was attempted:** <t:${Math.floor(\n\t\t\t\t\tDate.now() / 1000,\n\t\t\t\t)}:R>`,\n\t\t\t\tcolor: 0x2b2d31,\n\t\t\t\tthumbnail: {\n\t\t\t\t\turl: interaction.user.displayAvatarURL(),\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tconst options = new ActionRowBuilder<ButtonBuilder>({\n\t\t\t\tcomponents: [\n\t\t\t\t\tnew ButtonBuilder({\n\t\t\t\t\t\tcustom_id: `verify_toxic-${interaction.user.id}`,\n\t\t\t\t\t\tlabel: \"Verify\",\n\t\t\t\t\t\tstyle: ButtonStyle.Success,\n\t\t\t\t\t}),\n\t\t\t\t\tnew ButtonBuilder({\n\t\t\t\t\t\tcustom_id: `kick_toxic-${interaction.user.id}`,\n\t\t\t\t\t\tlabel: \"Kick\",\n\t\t\t\t\t\tstyle: ButtonStyle.Danger,\n\t\t\t\t\t}),\n\t\t\t\t\tnew ButtonBuilder({\n\t\t\t\t\t\tcustom_id: `ban_toxic-${interaction.user.id}`,\n\t\t\t\t\t\tlabel: \"Ban\",\n\t\t\t\t\t\tstyle: ButtonStyle.Danger,\n\t\t\t\t\t}),\n\t\t\t\t],\n\t\t\t});\n\n\t\t\tconst logs = interaction.guild?.channels.cache.get(\n\t\t\t\tguild?.logs ?? \"\",\n\t\t\t) as TextChannel | null;\n\t\t\tawait logs?.send({ embeds: [embed], components: [options] });\n\n\t\t\treturn;\n\t\t}\n\n\t\tif (\n\t\t\t!(interaction.member?.roles as GuildMemberRoleManager).cache.has(\n\t\t\t\tguild?.quarantine ?? \"\",\n\t\t\t)\n\t\t) {\n\t\t\tawait interaction.editReply({\n\t\t\t\tembeds: [\n\t\t\t\t\terrorEmbedBuilder(\n\t\t\t\t\t\t\"It seems that you have already verified. If this is an error, ask an admin to verify you!\",\n\t\t\t\t\t),\n\t\t\t\t],\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\tawait interaction.editReply({\n\t\t\tembeds: [successEmbedBuilder(\"Follow instructions on DMs\")],\n\t\t});\n\n\t\tconst { message: initialEmbed, text: initialText } =\n\t\t\tawait this.embedBuilder();\n\n\t\tconst msg = await (interaction.member as GuildMember | null)\n\t\t\t?.send(initialEmbed)\n\t\t\t.catch(async () => {\n\t\t\t\tawait interaction.editReply(\"You must activate DMs to verify.\");\n\t\t\t\treturn;\n\t\t\t});\n\n\t\tif (!msg) return;\n\n\t\tthis.verify(initialText, interaction, msg, guild);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
