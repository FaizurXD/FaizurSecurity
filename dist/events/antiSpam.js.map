{
  "version": 3,
  "sources": ["../../events/antiSpam.ts"],
  "sourcesContent": ["import type { Message, TextChannel } from \"discord.js\";\nimport { Events, Collection, ChannelType } from \"discord.js\";\nimport prisma from \"../database.js\";\nimport { logBuilder } from \"../utils.js\";\n\nexport default class AntiSpam {\n\tname = Events.MessageCreate;\n\n\tstatic users = new Collection<string, number>();\n\tstatic timeout = (id: string) =>\n\t\tsetTimeout(() => {\n\t\t\tAntiSpam.users.delete(id);\n\t\t}, 10_000);\n\n\tasync purge(message: Message<true>, minutes: number, limit: number) {\n\t\tawait message.member?.timeout(60_000 * minutes, \"spamming\");\n\t\tconst messages = [\n\t\t\t...message.channel.messages.cache\n\t\t\t\t.filter((m) => m.author.id === message.author.id)\n\t\t\t\t.values(),\n\t\t].slice(0, limit);\n\t\tawait (message.channel as TextChannel).bulkDelete(messages);\n\t}\n\n\tasync run(message: Message<true>) {\n\t\tif (!message.inGuild()) return;\n\n\t\tif (message.channel.type !== ChannelType.GuildText) return;\n\n\t\tconst guild = await prisma.guild.findUnique({\n\t\t\twhere: { guild: message.guildId },\n\t\t\tselect: {\n\t\t\t\tantiSpam: true,\n\t\t\t\tadmins: true,\n\t\t\t\towners: true,\n\t\t\t\tspamMinutes: true,\n\t\t\t\tspamMessageLimit: true,\n\t\t\t\tlogs: true,\n\t\t\t},\n\t\t});\n\n\t\tif (!guild?.antiSpam) return;\n\t\tif (\n\t\t\tguild?.admins.includes(message.author.id) ||\n\t\t\tguild?.owners.includes(message.author.id) ||\n\t\t\tmessage.author.id === message.guild.ownerId\n\t\t)\n\t\t\treturn;\n\n\t\tAntiSpam.timeout(message.author.id).refresh();\n\n\t\tconst minutes = guild?.spamMinutes;\n\t\tconst limit = guild?.spamMessageLimit;\n\t\tconst msgCount =\n\t\t\t(AntiSpam.users.get(message.author.id ?? message.webhookId) ?? 0) + 1;\n\n\t\tif (message.author.id === message.client.user?.id) return;\n\n\t\tif (!AntiSpam.users.has(message.author.id)) {\n\t\t\tAntiSpam.users.set(message.author.id, 1);\n\t\t\treturn;\n\t\t}\n\n\t\tif (msgCount === limit) {\n\t\t\tawait this.purge(message, minutes, limit).catch(() => {\n\t\t\t\tmessage.guild.roles.cache\n\t\t\t\t\t.filter((r) => r.id !== message.guildId)\n\t\t\t\t\t.forEach(async (r) => {\n\t\t\t\t\t\tawait message.member?.roles\n\t\t\t\t\t\t\t.remove(r, \"Spamming\")\n\t\t\t\t\t\t\t.catch(async () => {\n\t\t\t\t\t\t\t\tif (!message.author.bot) return;\n\t\t\t\t\t\t\t\tawait r.setPermissions([], \"Spamming\").catch(() => {});\n\t\t\t\t\t\t\t\tawait this.purge(message, minutes, limit).catch(() => {});\n\t\t\t\t\t\t\t\tAntiSpam.users.set(\n\t\t\t\t\t\t\t\t\tmessage.author.id ?? message.webhookId,\n\t\t\t\t\t\t\t\t\tmsgCount,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\tawait this.purge(message, minutes, limit).catch(() => {});\n\t\t\t\t\t\tAntiSpam.users.set(message.author.id, msgCount);\n\t\t\t\t\t});\n\t\t\t});\n\n\t\t\tconst webhooks = await message.channel.fetchWebhooks();\n\t\t\tconst webhook = webhooks?.find((w) => w.id === message.webhookId);\n\t\t\tawait webhook?.delete(\"Spamming\")?.catch(() => {});\n\n\t\t\tconst logs = message.guild.channels.cache.get(\n\t\t\t\tguild?.logs ?? \"\",\n\t\t\t) as TextChannel | null;\n\t\t\tawait logs?.send(\n\t\t\t\tlogBuilder({\n\t\t\t\t\treason: `Was detected spamming. Webhook: ${!!message.webhookId}!`,\n\t\t\t\t\tguild: message.guild,\n\t\t\t\t\tpunished: true,\n\t\t\t\t\tmember: message.member || `<@${message.webhookId}>`,\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\n\t\tAntiSpam.users.set(message.author.id, msgCount);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["_a"]
}
