{
  "version": 3,
  "sources": ["../../commands/warnings.ts"],
  "sourcesContent": ["import type {\n  ChatInputCommandInteraction,\n  Embed,\n  GuildMember,\n  GuildMemberRoleManager,\n  TextChannel,\n  User,\n} from \"discord.js\";\nimport {\n  EmbedBuilder,\n  PermissionFlagsBits,\n  SlashCommandBuilder,\n} from \"discord.js\";\nimport {\n  addWarn,\n  defaultError,\n  errorEmbedBuilder,\n  logBuilder,\n  successEmbedBuilder,\n} from \"../utils.js\";\nimport {\n  ButtonStyles,\n  ButtonTypes,\n  pagination,\n} from \"@devraelfreeze/discordjs-pagination\";\nimport emojis from \"../emojis.js\";\nimport prisma from \"../database.js\";\n\nexport default class Warnings {\n  data = new SlashCommandBuilder()\n    .setName(\"warnings\")\n    .setDescription(\"Use this command to manage the warnings in your server!\")\n    .setDefaultMemberPermissions(PermissionFlagsBits.KickMembers)\n    .addSubcommand((subcommand) =>\n      subcommand\n        .setName(\"add\")\n        .setNameLocalizations({ \"es-ES\": \"advertir\" })\n        .setDescription(\"Warn a user!\")\n        .setDescriptionLocalizations({ \"es-ES\": \"Advierte a un usuario!\" })\n        .addUserOption((option) =>\n          option\n            .setName(\"member\")\n            .setNameLocalizations({ \"es-ES\": \"miembro\" })\n            .setDescription(\"You can pass a mention or an id of a member.\")\n            .setDescriptionLocalizations({\n              \"es-ES\": \"Puedes pasar una menci\u00F3n o un id de un miembro.\",\n            })\n            .setRequired(true)\n        )\n        .addStringOption((option) =>\n          option\n            .setName(\"reason\")\n            .setNameLocalizations({ \"es-ES\": \"raz\u00F3n\" })\n            .setDescription(\"You must provide a reason for this warning\")\n            .setDescriptionLocalizations({\n              \"es-ES\": \"Debes proveer una raz\u00F3n para esta advertencia\",\n            })\n            .setRequired(true)\n        )\n    )\n    .addSubcommand((subcommand) =>\n      subcommand\n        .setName(\"remove\")\n        .setNameLocalizations({ \"es-ES\": \"quitar\" })\n        .setDescription(\"Remove a warning from a user!\")\n        .setDescriptionLocalizations({\n          \"es-ES\": \"Quita una advertencia de un usuario!\",\n        })\n        .addUserOption((option) =>\n          option\n            .setName(\"user\")\n            .setDescription(\"You can pass a mention or an id of a member.\")\n            .setRequired(true)\n        )\n        .addStringOption((option) =>\n          option\n            .setName(\"id\")\n            .setDescription(\n              \"You can provide the id of the warning you want to delete!\",\n            )\n        )\n    )\n    .addSubcommand((subcommand) =>\n      subcommand\n        .setName(\"show\")\n        .setDescription(\"Show all warnings of a user!\")\n        .addUserOption((option) =>\n          option\n            .setName(\"user\")\n            .setDescription(\"You can pass a mention or an id of a member.\")\n            .setRequired(true)\n        )\n    );\n\n  async run(interaction: ChatInputCommandInteraction) {\n    if (!interaction.inGuild()) {\n      await interaction.reply({\n        embeds: [\n          errorEmbedBuilder(\"This command can only be run on a server!\"),\n        ],\n      });\n      return;\n    }\n\n    const member = interaction.options.getMember(\"user\") as GuildMember | null;\n\n    if (!member) {\n      await interaction.reply({\n        embeds: [errorEmbedBuilder(\"Couldn't find that member!\")],\n        ephemeral: true,\n      });\n      return;\n    }\n\n    switch (interaction.options.getSubcommand()) {\n      case \"add\":\n        await addWarn(interaction);\n        break;\n\n      case \"remove\": {\n        const id = interaction.options.getString(\"id\");\n\n        if (member.user.bot) {\n          await interaction.reply({\n            embeds: [\n              errorEmbedBuilder(\"You cannot remove a warning from a bot!\"),\n            ],\n            ephemeral: true,\n          });\n          return;\n        }\n\n        if (member.user.id === interaction.user.id) {\n          await interaction.reply({\n            embeds: [\n              errorEmbedBuilder(\"You cannot remove warnings from yourself!\"),\n            ],\n            ephemeral: true,\n          });\n          return;\n        }\n\n        await interaction.deferReply({ ephemeral: true });\n\n        try {\n          const guild = await prisma.guild.findUnique({\n            where: {\n              guild: interaction.guildId,\n            },\n            select: {\n              mods: true,\n              admins: true,\n              owners: true,\n              logs: true,\n            },\n          });\n\n          const roles = interaction.member?.roles as GuildMemberRoleManager;\n\n          if (\n            !(\n              roles.cache.has(guild?.mods ?? \"\") ||\n              guild?.admins.includes(interaction.user.id) ||\n              guild?.owners.includes(interaction.user.id) ||\n              interaction.user.id === interaction.guild?.ownerId\n            )\n          ) {\n            await interaction.editReply({\n              embeds: [\n                errorEmbedBuilder(\n                  \"You don't have permission to remove warnings from members!\",\n                ),\n              ],\n            });\n            return;\n          }\n\n          const warns = await prisma.warn.findMany({\n            where: {\n              userId: member.user.id,\n              guildId: member.guild.id,\n            },\n          });\n\n          if (warns?.length === 0) {\n            await interaction.editReply({\n              embeds: [\n                errorEmbedBuilder(\"This user doesn't have any warnings\"),\n              ],\n            });\n            break;\n          }\n\n          if (!id) {\n            await prisma.warn.delete({\n              where: {\n                userId_guildId: {\n                  userId: member.user.id,\n                  guildId: member.guild.id,\n                },\n              },\n            });\n            await interaction.editReply({\n              embeds: [\n                successEmbedBuilder(`Removed all warnings from ${member.user}`),\n              ],\n            });\n\n            const logs = interaction.guild?.channels.cache.get(\n              guild?.logs ?? \"\",\n            ) as TextChannel;\n            await logs?.send(\n              logBuilder({\n                member: interaction.member as GuildMember,\n                reason: `Warns removed by ${interaction.user.tag}`,\n              }),\n            );\n            break;\n          }\n\n          try {\n            await prisma.warn.delete({\n              where: { id },\n            });\n          } catch {\n            await interaction.editReply({\n              embeds: [\n                errorEmbedBuilder(\n                  `Warning with id \\`${id}\\` has not been found!`,\n                ),\n              ],\n            });\n            break;\n          }\n\n          await interaction.editReply({\n            embeds: [\n              successEmbedBuilder(\n                `Removed warning with id \\`${id}\\` from ${member.user}`,\n              ),\n            ],\n          });\n          const logs = interaction.guild?.channels.cache.get(\n            guild?.logs ?? \"\",\n          ) as TextChannel;\n          await logs?.send(\n            logBuilder({\n              member: interaction.member as GuildMember,\n              reason: `Warn removed by ${interaction.user.tag}`,\n            }),\n          );\n        } catch {\n          await interaction.editReply(defaultError);\n        }\n        break;\n      }\n\n      case \"show\":\n        if (member.user.bot) {\n          await interaction.reply({\n            embeds: [errorEmbedBuilder(\"You cannot show warnings for a bot!\")],\n            ephemeral: true,\n          });\n          return;\n        }\n\n        await interaction.deferReply({ ephemeral: true });\n\n        try {\n          const warns = await prisma.warn.findMany({\n            where: {\n              userId: member.user.id,\n              guildId: interaction.guildId,\n            },\n          });\n\n          let min = 0;\n          let max = 5;\n\n          const show = () => {\n            min = min + 5;\n            max = max + 5;\n\n            return new EmbedBuilder()\n              .setTitle(`${emojis.warn} Warnings`)\n              .setDescription(\n                `${emojis.reply1} Here are the current warnings for ${member.user} \\n`,\n              )\n              .setThumbnail(member.user.displayAvatarURL())\n              .setImage(\n                warns?.length === 0 ? \"https://i.imgur.com/ozUEfs5.gif\" : null,\n              )\n              .setFields(\n                warns\n                  ?.filter((_, i) => i < max - 5 && i >= min - 5)\n                  .map((warn, i) => {\n                    return {\n                      name: `__Warning ${i + (min - 4)}__`,\n                      value:\n                        `${emojis.arrow} **ID:** \\`${warn.id}\\` \\n ${emojis.arrow} **Date:** <t:${\n                          Math.floor(\n                            warn.createdAt.getTime() / 1000,\n                          )\n                        }:R> \\n ${emojis.arrow} **Reason:** ${warn.reason} \\n`,\n                    };\n                  }),\n              )\n              .setColor(0x2b2d31)\n              .setFooter({\n                text: interaction.guild?.name ?? \"\",\n                iconURL: interaction.guild?.iconURL() ?? undefined,\n              });\n          };\n\n          await pagination({\n            embeds: warns?.length !== 0\n              ? [...Array(Math.ceil(warns.length / 5))].map(\n                () => show() as unknown as Embed,\n              )\n              : [show() as unknown as Embed],\n            author: interaction.member.user as User,\n            interaction: interaction,\n            ephemeral: false,\n            time: 40000,\n            disableButtons: true,\n            fastSkip: false,\n            pageTravel: false,\n            buttons: [\n              {\n                type: ButtonTypes.previous,\n                label: \"Previous Page\",\n                style: ButtonStyles.Success,\n                emoji: `${emojis.arrow2}`,\n              },\n              {\n                type: ButtonTypes.next,\n                label: \"Next Page\",\n                style: ButtonStyles.Success,\n                emoji: `${emojis.arrow}`,\n              },\n            ],\n          });\n        } catch (e) {\n          console.error(e);\n          await interaction.editReply(defaultError);\n        }\n        break;\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": ["logs", "_a", "_b"]
}
